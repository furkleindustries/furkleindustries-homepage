{"version":3,"sources":["components/App/index.js","serviceWorker.js","index.js","components/App/index.module.scss"],"names":["Content","lazy","__webpack_require__","e","then","bind","App","react_default","a","createElement","className","styles","react","fallback","isLocalhost","Boolean","window","location","hostname","match","register","config","navigator","URL","process","href","origin","addEventListener","swUrl","concat","fetch","response","contentType","headers","get","status","indexOf","serviceWorker","ready","registration","unregister","reload","registerValidSW","catch","console","log","checkValidServiceWorker","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","error","Object","asyncToGenerator","regenerator_default","mark","_callee","wrap","_context","prev","next","default","inkjs","sent","render","App_App","document","getElementById","stop","module","exports"],"mappings":"gLAQMA,EAAUC,eAAK,kBAAMC,EAAAC,EAAA,GAAAC,KAAAF,EAAAG,KAAA,YAEdC,EAAM,kBACjBC,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IAAOL,KACrBC,EAAAC,EAAAC,cAACG,EAAA,SAAD,CAAUC,SAAUN,EAAAC,EAAAC,cAAA,0BAClBF,EAAAC,EAAAC,cAACT,EAAD,gBCDAc,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAIC,SAASC,EAASC,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAIC,IAAIC,IAAwBR,OAAOC,SAASQ,MACpDC,SAAWV,OAAOC,SAASS,OAIvC,OAGFV,OAAOW,iBAAiB,OAAQ,WAC9B,IAAMC,EAAK,GAAAC,OAAML,IAAN,sBAEPV,IAgEV,SAAiCc,EAAOP,GAEtCS,MAAMF,GACHxB,KAAK,SAAA2B,GAEJ,IAAMC,EAAcD,EAASE,QAAQC,IAAI,gBAEnB,MAApBH,EAASI,QACO,MAAfH,IAA8D,IAAvCA,EAAYI,QAAQ,cAG5Cd,UAAUe,cAAcC,MAAMlC,KAAK,SAAAmC,GACjCA,EAAaC,aAAapC,KAAK,WAC7BY,OAAOC,SAASwB,aAKpBC,EAAgBd,EAAOP,KAG1BsB,MAAM,WACLC,QAAQC,IACN,mEArFAC,CAAwBlB,EAAOP,GAI/BC,UAAUe,cAAcC,MAAMlC,KAAK,WACjCwC,QAAQC,IACN,gHAMJH,EAAgBd,EAAOP,MAM/B,SAASqB,EAAgBd,EAAOP,GAC9BC,UAAUe,cACPjB,SAASQ,GACTxB,KAAK,SAAAmC,GACJA,EAAaQ,cAAgB,WAC3B,IAAMC,EAAmBT,EAAaU,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACf7B,UAAUe,cAAce,YAI1BR,QAAQC,IACN,iHAKExB,GAAUA,EAAOgC,UACnBhC,EAAOgC,SAASd,KAMlBK,QAAQC,IAAI,sCAGRxB,GAAUA,EAAOiC,WACnBjC,EAAOiC,UAAUf,UAO5BI,MAAM,SAAAY,GACLX,QAAQW,MAAM,4CAA6CA,WChFjEC,OAAAC,EAAA,EAAAD,CAAAE,EAAAlD,EAAAmD,KAAC,SAAAC,IAAA,OAAAF,EAAAlD,EAAAqD,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,UACuB,qBAAXhD,OADZ,CAAA8C,EAAAE,KAAA,eAAAF,EAAAE,KAAA,EAEwB9D,EAAAC,EAAA,GAAAC,KAAAF,EAAAG,KAAA,UAAwB4D,QAFhD,OAEGjD,OAAOkD,MAFVJ,EAAAK,KAAA,OAKCC,iBACE7D,EAAAC,EAAAC,cAAC4D,EAAD,MACAC,SAASC,eAAe,SAKxBnD,IAZH,wBAAA0C,EAAAU,SAAAZ,KAADJ,sBCfAiB,EAAAC,QAAA,CAAkBpE,IAAA","file":"static/js/main.3c080479.chunk.js","sourcesContent":["import {\n  default as React,\n  lazy,\n  Suspense,\n} from 'react';\n\nimport styles from './index.module.scss';\n\nconst Content = lazy(() => import('../Document'));\n\nexport const App = () => (\n  <div className={styles.App}>\n    <Suspense fallback={<div>Loading...</div>}>\n      <Content />\n    </Suspense>\n  </div>\n);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {\n  App,\n} from './components/App';\nimport {\n  default as React,\n} from 'react';\nimport {\n  render,\n} from 'react-dom';\nimport {\n  register,\n  unregister,\n} from './serviceWorker';\n\nimport './index.css';\n\n(async () => {\n  if (typeof window !== 'undefined') {\n    window.inkjs = await import('./ink/runtime').default;\n  }\n\n  render(\n    <App />,\n    document.getElementById('root'),\n  );\n\n  // Learn more about service workers: https://bit.ly/CRA-PWA\n  if (process.env.NODE_ENV === 'production') {\n    register();\n  } else {\n    unregister();\n  }\n})();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__2za5z\"};"],"sourceRoot":""}