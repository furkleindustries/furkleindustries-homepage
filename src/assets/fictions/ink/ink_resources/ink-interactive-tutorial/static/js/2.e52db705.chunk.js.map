{"version":3,"sources":["../node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js","../node_modules/@babel/runtime/helpers/esm/setPrototypeOf.js","../node_modules/@babel/runtime/helpers/esm/inherits.js","../node_modules/@babel/runtime/helpers/esm/classCallCheck.js","../node_modules/@babel/runtime/helpers/esm/typeof.js","../node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn.js","../node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js","../node_modules/classnames/index.js","../node_modules/@mdx-js/tag/dist/mdx-provider.js","components/Code/index.module.scss","../node_modules/@mdx-js/tag/dist/index.js","../node_modules/@mdx-js/tag/dist/mdx-tag.js","components/Inkifier/index.module.scss","ink/examples lazy /^/.*/.ink$/ groupOptions: {} namespace object","../node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js","../node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js","components/Code/index.js","../node_modules/@mdx-js/react/dist/index.es.js","markdown/chapters/introduction.mdx","components/Inkifier/index.js","components/Example/index.js","markdown/chapters/chapter01.mdx","markdown/chapters/chapter02.mdx","markdown/chapters/chapter03.mdx","markdown/chapters/chapter04.mdx","markdown/chapters/chapter05.mdx","markdown/chapters/chapter06.mdx","markdown/document.mdx","components/Document/index.js","functions/getMdxComponents.js"],"names":["_getPrototypeOf","o","Object","setPrototypeOf","getPrototypeOf","__proto__","__webpack_require__","d","__webpack_exports__","_setPrototypeOf","p","_inherits","_setPrototypeOf__WEBPACK_IMPORTED_MODULE_0__","subClass","superClass","TypeError","prototype","create","constructor","value","writable","configurable","_classCallCheck","instance","Constructor","_typeof2","obj","Symbol","iterator","_typeof","_possibleConstructorReturn","self","call","ReferenceError","_assertThisInitialized","__WEBPACK_AMD_DEFINE_RESULT__","hasOwn","hasOwnProperty","classNames","classes","i","arguments","length","arg","argType","push","Array","isArray","inner","apply","key","join","module","exports","default","undefined","defineProperty","withMDXComponents","_extends","assign","target","source","_react","_react2","__esModule","_React$createContext","createContext","Provider","Consumer","Component","props","createElement","contextComponents","components","children","codeWrapper","code","_mdxTag","enumerable","get","_interopRequireDefault","_mdxProvider","_createClass","defineProperties","descriptor","protoProps","staticProps","defaults","inlineCode","wrapper","MDXTag","_Component","this","_props","name","parentName","_props$props","childProps","_props$components","Layout","layoutProps","inkifier","map","./basic-branching.ink","./choice-hello-world.ink","./comments.ink","./compiler-comments.ink","./diverts-seamless.ink","./diverts.ink","./glue.ink","./hello-world-multiline.ink","./hello-world.ink","./knot-hello-world-working.ink","./knot-hello-world.ink","./mixed-dialogue-choices.ink","./mixing-choice-and-output-text.ink","./multiple-choices.ink","./suppressing-choice-text.ink","webpackAsyncContext","req","Promise","resolve","then","e","Error","ids","id","keys","_objectWithoutProperties","excluded","sourceKeys","indexOf","_objectWithoutPropertiesLoose","getOwnPropertySymbols","sourceSymbolKeys","propertyIsEnumerable","Code","_ref","className","react_default","a","styles","classnames","readOnly","index_es_n","index_es_t","r","t","useContext","index_es_o","index_es_c","n","Fragment","index_es_i","mdxType","originalType","l","index_es_p","c","m","u","displayName","MDXLayout","MDXContent","isMDXComponent","Inkifier","_React$PureComponent","_getPrototypeOf2","_this","classCallCheck","_len","args","_key","possibleConstructorReturn","concat","ref","createRef","render","_this$props","_this$props$id","Math","ceil","random","_this$props$width","width","_this$props$height","height","storyContent","Reffer","React","forwardRef","unused","title","componentDidMount","_this$props2","output","doc","current","contentDocument","docBody","body","inkifierScriptElem","src","appendChild","runtimeScriptElem","textContent","JSON","stringify","lines","split","aa","trim","filter","Boolean","outputContainer","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","next","done","line","lineElem","lineElemCode","err","return","inherits","PureComponent","Example","state","loaded","text","setState","Code_Code","Inkifier_Inkifier","chapter01_MDXLayout","Example_Example","href","chapter02_MDXLayout","chapter03_MDXLayout","chapter04_MDXLayout","chapter05_MDXLayout","chapter06_MDXLayout","document_MDXLayout","chapter01_MDXContent","chapter02_MDXContent","chapter03_MDXContent","chapter04_MDXContent","chapter05_MDXContent","chapter06_MDXContent","mdxComponents","pre","Document","dist","document_MDXContent"],"mappings":"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","file":"static/js/2.e52db705.chunk.js","sourcesContent":["export default function _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}","export default function _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}","import setPrototypeOf from \"./setPrototypeOf\";\nexport default function _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) setPrototypeOf(subClass, superClass);\n}","export default function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}","function _typeof2(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof2 = function _typeof2(obj) { return typeof obj; }; } else { _typeof2 = function _typeof2(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof2(obj); }\n\nexport default function _typeof(obj) {\n  if (typeof Symbol === \"function\" && _typeof2(Symbol.iterator) === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return _typeof2(obj);\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : _typeof2(obj);\n    };\n  }\n\n  return _typeof(obj);\n}","import _typeof from \"../../helpers/esm/typeof\";\nimport assertThisInitialized from \"./assertThisInitialized\";\nexport default function _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return assertThisInitialized(self);\n}","export default function _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}","/*!\n  Copyright (c) 2017 Jed Watson.\n  Licensed under the MIT License (MIT), see\n  http://jedwatson.github.io/classnames\n*/\n\n/* global define */\n(function () {\n  'use strict';\n\n  var hasOwn = {}.hasOwnProperty;\n\n  function classNames() {\n    var classes = [];\n\n    for (var i = 0; i < arguments.length; i++) {\n      var arg = arguments[i];\n      if (!arg) continue;\n      var argType = typeof arg;\n\n      if (argType === 'string' || argType === 'number') {\n        classes.push(arg);\n      } else if (Array.isArray(arg) && arg.length) {\n        var inner = classNames.apply(null, arg);\n\n        if (inner) {\n          classes.push(inner);\n        }\n      } else if (argType === 'object') {\n        for (var key in arg) {\n          if (hasOwn.call(arg, key) && arg[key]) {\n            classes.push(key);\n          }\n        }\n      }\n    }\n\n    return classes.join(' ');\n  }\n\n  if (typeof module !== 'undefined' && module.exports) {\n    classNames.default = classNames;\n    module.exports = classNames;\n  } else if (typeof define === 'function' && typeof define.amd === 'object' && define.amd) {\n    // register as 'classnames', consistent with npm package name\n    define('classnames', [], function () {\n      return classNames;\n    });\n  } else {\n    window.classNames = classNames;\n  }\n})();","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.withMDXComponents = undefined;\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar _React$createContext = _react2.default.createContext({}),\n    Provider = _React$createContext.Provider,\n    Consumer = _React$createContext.Consumer;\n\nvar withMDXComponents = exports.withMDXComponents = function withMDXComponents(Component) {\n  return function (props) {\n    return _react2.default.createElement(Consumer, null, function (contextComponents) {\n      return _react2.default.createElement(Component, _extends({}, props, {\n        components: props.components || contextComponents\n      }));\n    });\n  };\n};\n\nvar MDXProvider = function MDXProvider(props) {\n  return _react2.default.createElement(Provider, {\n    value: props.components\n  }, props.children);\n};\n\nexports.default = MDXProvider;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"codeWrapper\":\"Code_codeWrapper__1zFvr\",\"code\":\"Code_code__2VfWL\"};","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _mdxTag = require('./mdx-tag');\n\nObject.defineProperty(exports, 'MDXTag', {\n  enumerable: true,\n  get: function get() {\n    return _interopRequireDefault(_mdxTag).default;\n  }\n});\n\nvar _mdxProvider = require('./mdx-provider');\n\nObject.defineProperty(exports, 'MDXProvider', {\n  enumerable: true,\n  get: function get() {\n    return _interopRequireDefault(_mdxProvider).default;\n  }\n});\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _mdxProvider = require('./mdx-provider');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar defaults = {\n  inlineCode: 'code',\n  wrapper: 'div'\n};\n\nvar MDXTag = function (_Component) {\n  _inherits(MDXTag, _Component);\n\n  function MDXTag() {\n    _classCallCheck(this, MDXTag);\n\n    return _possibleConstructorReturn(this, (MDXTag.__proto__ || Object.getPrototypeOf(MDXTag)).apply(this, arguments));\n  }\n\n  _createClass(MDXTag, [{\n    key: 'render',\n    value: function render() {\n      var _props = this.props,\n          name = _props.name,\n          parentName = _props.parentName,\n          _props$props = _props.props,\n          childProps = _props$props === undefined ? {} : _props$props,\n          children = _props.children,\n          _props$components = _props.components,\n          components = _props$components === undefined ? {} : _props$components,\n          Layout = _props.Layout,\n          layoutProps = _props.layoutProps;\n      var Component = components[parentName + '.' + name] || components[name] || defaults[name] || name;\n\n      if (Layout) {\n        return _react2.default.createElement(Layout, _extends({\n          components: components\n        }, layoutProps), _react2.default.createElement(Component, childProps, children));\n      }\n\n      return _react2.default.createElement(Component, childProps, children);\n    }\n  }]);\n\n  return MDXTag;\n}(_react.Component);\n\nexports.default = (0, _mdxProvider.withMDXComponents)(MDXTag);","// extracted by mini-css-extract-plugin\nmodule.exports = {\"inkifier\":\"Inkifier_inkifier__ebKVo\"};","var map = {\n\t\"./basic-branching.ink\": [\n\t\t28,\n\t\t5\n\t],\n\t\"./choice-hello-world.ink\": [\n\t\t29,\n\t\t6\n\t],\n\t\"./comments.ink\": [\n\t\t30,\n\t\t7\n\t],\n\t\"./compiler-comments.ink\": [\n\t\t31,\n\t\t8\n\t],\n\t\"./diverts-seamless.ink\": [\n\t\t32,\n\t\t9\n\t],\n\t\"./diverts.ink\": [\n\t\t33,\n\t\t10\n\t],\n\t\"./glue.ink\": [\n\t\t34,\n\t\t11\n\t],\n\t\"./hello-world-multiline.ink\": [\n\t\t35,\n\t\t12\n\t],\n\t\"./hello-world.ink\": [\n\t\t36,\n\t\t13\n\t],\n\t\"./knot-hello-world-working.ink\": [\n\t\t37,\n\t\t14\n\t],\n\t\"./knot-hello-world.ink\": [\n\t\t38,\n\t\t15\n\t],\n\t\"./mixed-dialogue-choices.ink\": [\n\t\t39,\n\t\t16\n\t],\n\t\"./mixing-choice-and-output-text.ink\": [\n\t\t40,\n\t\t17\n\t],\n\t\"./multiple-choices.ink\": [\n\t\t41,\n\t\t18\n\t],\n\t\"./suppressing-choice-text.ink\": [\n\t\t42,\n\t\t19\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn __webpack_require__.e(ids[1]).then(function() {\n\t\treturn __webpack_require__(id);\n\t});\n}\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.id = 27;\nmodule.exports = webpackAsyncContext;","import objectWithoutPropertiesLoose from \"./objectWithoutPropertiesLoose\";\nexport default function _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}","export default function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}","import {\r\n  default as classnames,\r\n} from 'classnames';\r\nimport {\r\n  default as React,\r\n} from 'react';\r\n\r\nimport styles from './index.module.scss';\r\n\r\nexport const Code = ({\r\n  children,\r\n  className,\r\n  ...props\r\n}) => (\r\n  <div className={styles.codeWrapper}>\r\n    <textarea\r\n      {...props}\r\n      className={classnames(styles.code, className)}\r\n      readOnly={true}\r\n      value={children}\r\n    >\r\n    </textarea>\r\n  </div>\r\n);\r\n","import e from \"react\";\n\nvar n = e.createContext({}),\n    r = function r(n) {\n  return function (r) {\n    var a = t(r.components);\n    return e.createElement(n, Object.assign({}, r, {\n      components: a\n    }));\n  };\n},\n    t = function t(r) {\n  var t = e.useContext(n),\n      a = t;\n  return r && (a = \"function\" == typeof r ? r(t) : Object.assign({}, t, r)), a;\n},\n    a = function a(r) {\n  var a = t(r.components);\n  return e.createElement(n.Provider, {\n    value: a\n  }, r.children);\n},\n    o = \"mdxType\",\n    c = {\n  inlineCode: \"code\",\n  wrapper: function wrapper(n) {\n    return e.createElement(e.Fragment, {}, n.children);\n  }\n},\n    i = function i(n) {\n  var r = n.components,\n      a = n.mdxType,\n      o = n.originalType,\n      i = n.parentName,\n      p = function (e, n) {\n    var r = {};\n\n    for (var t in e) {\n      Object.prototype.hasOwnProperty.call(e, t) && -1 === n.indexOf(t) && (r[t] = e[t]);\n    }\n\n    return r;\n  }(n, [\"components\", \"mdxType\", \"originalType\", \"parentName\"]),\n      l = t(r);\n\n  return e.createElement(l[i + \".\" + a] || l[a] || c[a] || o, p);\n};\n\nfunction p(n, r) {\n  var t = arguments,\n      a = r && r.mdxType;\n\n  if (\"string\" == typeof n || a) {\n    var c = t.length,\n        p = new Array(c);\n    p[0] = i;\n    var l = {};\n\n    for (var m in r) {\n      hasOwnProperty.call(r, m) && (l[m] = r[m]);\n    }\n\n    l.originalType = n, l[o] = \"string\" == typeof n ? n : a, p[1] = l;\n\n    for (var u = 2; u < c; u++) {\n      p[u] = t[u];\n    }\n\n    return e.createElement.apply(null, p);\n  }\n\n  return e.createElement.apply(null, t);\n}\n\ni.displayName = \"MDXCreateElement\";\nexport { n as MDXContext, a as MDXProvider, t as useMDXComponents, r as withMDXComponents, p as mdx };","/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\n\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h2>{`Introduction`}</h2>\n    <p><strong parentName=\"p\">{`ink`}</strong>{` is a scripting language built around the idea of marking up pure-text with flow in order to produce interactive scripts. `}</p>\n    <p>{`At its most basic, it can be used to write a Choose Your Own-style story, or a branching dialogue tree. But its real strength is in writing dialogues with lots of options and lots of recombination of the flow. `}</p>\n    <p><strong parentName=\"p\">{`ink`}</strong>{` offers several features to enable non-technical writers to branch often, and play out the consequences of those branches, in both minor and major ways, without fuss. `}</p>\n    <p>{`The script aims to be clean and logically ordered, so branching dialogue can be tested \"by eye\". The flow is described in a declarative fashion where possible.`}</p>\n    <p>{`It's also designed with redrafting in mind; so editing a flow should be fast.`}</p>\n    </MDXLayout>;\n}\n\nMDXContent.isMDXComponent = true;\n  ","import {\r\n  default as classnames,\r\n} from 'classnames';\r\nimport {\r\n  default as React,\r\n  createRef,\r\n} from 'react';\r\n\r\nimport styles from './index.module.scss';\r\n\r\nexport class Inkifier extends React.PureComponent {\r\n  ref = createRef();\r\n\r\n  render = () => {\r\n    const {\r\n      className,\r\n      id = `ink-tutorial-${Math.ceil(Math.random() * 1000000)}`,\r\n      width = 299,\r\n      height = 300,\r\n      storyContent,\r\n      ...props\r\n    } = this.props;\r\n\r\n    const Reffer = React.forwardRef((unused, ref) => (\r\n      <iframe\r\n        {...props}\r\n        className={classnames(styles.inkifier, className)}\r\n        ref={ref}\r\n        title={id}\r\n        width={width}\r\n        height={height}\r\n      ></iframe>\r\n    ));\r\n\r\n    return <Reffer ref={this.ref} />;\r\n  };\r\n\r\n  componentDidMount = () => {\r\n    const {\r\n      output,\r\n      storyContent,\r\n    } = this.props;\r\n\r\n    const iframeElem = this.ref.current;\r\n    const doc = iframeElem.contentDocument;\r\n    const docBody = doc.body;\r\n\r\n    const inkifierScriptElem = doc.createElement('script');\r\n    inkifierScriptElem.src = './inkifier-script.js';\r\n    docBody.appendChild(inkifierScriptElem);\r\n  \r\n    const runtimeScriptElem = doc.createElement('script');\r\n    runtimeScriptElem.textContent =\r\n      `var storyContent = ${JSON.stringify(storyContent)};`;\r\n\r\n    docBody.appendChild(runtimeScriptElem);\r\n\r\n    if (output) {\r\n      const lines = output\r\n        .split('\\n')\r\n        .map((aa) => aa.trim())\r\n        .filter(Boolean);\r\n\r\n      if (lines.length) {\r\n        const outputContainer = doc.createElement('ul');\r\n        for (const line of lines) {\r\n          const lineElem = doc.createElement('li');\r\n          const lineElemCode = doc.createElement('code');\r\n          lineElemCode.textContent = line;\r\n          lineElem.appendChild(lineElemCode);\r\n          outputContainer.appendChild(lineElem);\r\n        }\r\n\r\n        docBody.appendChild(outputContainer);\r\n      }\r\n    }\r\n  };\r\n}\r\n","import {\r\n  Code,\r\n} from '../Code';\r\nimport {\r\n  Inkifier,\r\n} from '../Inkifier';\r\nimport {\r\n  default as React,\r\n} from 'react';\r\n\r\nexport class Example extends React.PureComponent {\r\n  state = {\r\n    loaded: false,\r\n    output: '',\r\n    storyContent: null,\r\n    text: '',\r\n  };\r\n\r\n  componentDidMount = () => {\r\n    const { id } = this.props;\r\n    if (!id) {\r\n      throw new Error('Example has no id prop.');\r\n    }\r\n\r\n    /* Very evil to do this here but I don't care, it's a free tutorial. */\r\n    import(`../../ink/examples/${id}.ink`).then(({\r\n      storyContent,\r\n      output,\r\n      text,\r\n    }) => this.setState({\r\n      output,\r\n      storyContent,\r\n      text,\r\n      loaded: true,\r\n    }));\r\n  };\r\n\r\n  render = () => (\r\n    !this.state.loaded ?\r\n      <div>Loading example.</div> :\r\n      <div>\r\n        <Code>{this.state.text}</Code>\r\n        <Inkifier\r\n          output={this.state.output}\r\n          storyContent={this.state.storyContent}\r\n          width={299}\r\n        />\r\n      </div>\r\n  );\r\n};\r\n","/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\nimport {\n\tExample,\n} from '../../components/Example';\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h1>{`Part One: The Basics`}</h1>\n    <h2>{`1) Content`}</h2>\n    <h3>{`The simplest ink script`}</h3>\n    <p>{`The most basic ink script is just text in a .ink file.`}</p>\n    <Example id=\"hello-world\" mdxType=\"Example\" />\n    <p>{`Text on separate lines produces new paragraphs:`}</p>\n    <Example id=\"hello-world-multiline\" mdxType=\"Example\" />\n    <h3>{`Comments`}</h3>\n    <p>{`By default, all text in your file will appear in the output content, unless specially marked up. `}</p>\n    <p>{`The simplest mark-up is a comment. `}<strong parentName=\"p\">{`ink`}</strong>{` supports two kinds of comment. There's the kind used for someone reading the code, which the compiler ignores:`}</p>\n    <Example id=\"comments\" mdxType=\"Example\" />\n    <p>{`and there's the kind used for reminding the author what they need to do, that the compiler prints out during compilation:`}</p>\n    <Example id=\"compiler-comments\" mdxType=\"Example\" />\n    <h3>{`Tags`}</h3>\n    <p>{`Text content from the game will appear 'as is' when the engine runs. However, it can sometimes be useful to mark up a line of content with extra information to tell the game what to do with that content. `}</p>\n    <p><strong parentName=\"p\">{`ink`}</strong>{` provides a simple system for tagging lines of content, with hashtags. `}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`=== content \n    A line of normal game-text. # colour it blue\n`}</code></pre>\n    <p>{`These don't show up in the main text flow, but can be read off by the game and used as you see fit. See `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/inkle/ink/blob/master/Documentation/RunningYourInk.md#marking-up-your-ink-content-with-tags\"\n      }}>{`RunningYourInk`}</a>{` for more information.`}</p>\n    <h2>{`2) Choices`}</h2>\n    <p>{`Input is offered to the player via text choices. A text choice is indicated by an `}<inlineCode parentName=\"p\">{`*`}</inlineCode>{` character. `}</p>\n    <p>{`If no other flow instructions are given, once made, the choice will flow into the next line of text.`}</p>\n    <Example id=\"choice-hello-world\" mdxType=\"Example\" />\n    <p>{`By default, the text of a choice appears again, in the output. `}</p>\n    <h3>{`Suppressing choice text`}</h3>\n    <p>{`Some games separate the text of a choice from its outcome. In `}<strong parentName=\"p\">{`ink`}</strong>{`, if the choice text is given in square brackets, the text of the choice will not be printed into response.`}</p>\n    <Example id=\"suppressing-choice-text\" mdxType=\"Example\" />\n    <h4>{`Advanced: mixing choice and output text`}</h4>\n    <p>{`The square brackets in fact divide up the option content. What's before is printed in both choice and output; what's inside only in choice; and what's after, only in output. Effectively, they provide alternative ways for a line to end.`}</p>\n    <Example id=\"mixing-choice-and-output-text\" mdxType=\"Example\" />\n\t\nThis is most useful when writing dialogue choices:\n    <Example id=\"mixed-dialogue-choices\" mdxType=\"Example\" />\n    <h3>{`Multiple Choices`}</h3>\n    <p>{`To make choices really choices, we need to provide alternatives. We can do this simply by listing them:`}</p>\n    <Example id=\"multiple-choices\" mdxType=\"Example\" />\n    <p>{`The above syntax is enough to write a single set of choices. In a real game, we'll want to move the flow from one point to another based on what the player chooses. To do that, we need to introduce a bit more structure.`}</p>\n    <h2>{`3) Knots`}</h2>\n    <h3>{`Pieces of content are called knots`}</h3>\n    <p>{`To allow the game to branch we need to mark up sections of content with names (as an old-fashioned gamebook does with its 'Paragraph 18', and the like.) `}</p>\n    <p>{`These sections are called \"knots\" and they're the fundamental structural unit of ink content.`}</p>\n    <h3>{`Writing a knot`}</h3>\n    <p>{`The start of a knot is indicated by two or more equals signs, as follows.`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`=== top_knot ===\n`}</code></pre>\n    <p>{`(The equals signs on the end are optional; and the name needs to be a single word with no spaces.)`}</p>\n    <p>{`The start of a knot is a header; the content that follows will be inside that knot.`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`=== back_in_london ===\n\nWe arrived into London at 9.45pm exactly.\n`}</code></pre>\n    <h4>{`Advanced: a knottier \"hello world\"`}</h4>\n    <p>{`When you start an ink file, content outside of knots will be run automatically. But knots won't. So if you start using knots to hold your content, you'll need to tell the game where to go. We do this with a divert arrow `}<inlineCode parentName=\"p\">{`->`}</inlineCode>{`, which is covered properly in the next section.`}</p>\n    <p>{`The simplest knotty script is:`}</p>\n    <Example id=\"knot-hello-world\" mdxType=\"Example\" />\n    <p>{`However, `}<strong parentName=\"p\">{`ink`}</strong>{` doesn't like loose ends, and produces a warning on compilation and/or run-time when it thinks this has happened. It also produces the following error on runtime:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`Runtime error in tests/test.ink line 3: ran out of content. Do you need a '-> DONE' or '-> END'?\n`}</code></pre>\n    <p>{`The following plays and compiles without error:`}</p>\n    <Example id=\"knot-hello-world-working\" mdxType=\"Example\" />\n\t\n`-> END` is a marker for both the writer and the compiler; it means \"the story flow should now stop\".\n    <h2>{`4) Diverts`}</h2>\n    <h3>{`Knots divert to knots`}</h3>\n    <p>{`You can tell the story to move from one knot to another using `}<inlineCode parentName=\"p\">{`->`}</inlineCode>{`, a \"divert arrow\". Diverts happen immediately without any user input.`}</p>\n    <Example id=\"diverts\" mdxType=\"Example\" />\n    <h4>{`Diverts are invisible`}</h4>\n    <p>{`Diverts are intended to be seamless and can even happen mid-sentence:`}</p>\n    <Example id=\"diverts-seamless\" mdxType=\"Example\" />\n    <h4>{`Glue`}</h4>\n    <p>{`The default behaviour inserts line-breaks before every new line of content. In some cases, however, content must insist on not having a line-break, and it can do so using `}<inlineCode parentName=\"p\">{`<>`}</inlineCode>{`, or \"glue\".`}</p>\n    <Example id=\"glue\" mdxType=\"Example\" />\n    <p>{`You can't use too much glue: multiple glues next to each other have no additional effect. (And there's no way to \"negate\" a glue; once a line is sticky, it'll stick.)`}</p>\n    <h2>{`5) Branching The Flow`}</h2>\n    <h3>{`Basic branching`}</h3>\n    <p>{`Combining knots, options and diverts gives us the basic structure of a choose-your-own game.`}</p>\n    <Example id=\"basic-branching\" mdxType=\"Example\" />\n    <h3>{`Branching and joining`}</h3>\n    <p>{`Using diverts, the writer can branch the flow, and join it back up again, without showing the player that the flow has rejoined.`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`=== back_in_london ===\n\nWe arrived into London at 9.45pm exactly.\n\n*   \"There is not a moment to lose!\"[] I declared.\n    -> hurry_outside \n    \n*   \"Monsieur, let us savour this moment!\"[] I declared.\n    My master clouted me firmly around the head and dragged me out of the door. \n    -> dragged_outside \n\n*   [We hurried home] -> hurry_outside\n\n    \n=== hurry_outside ===\nWe hurried home to Savile Row -> as_fast_as_we_could\n\n\n=== dragged_outside === \nHe insisted that we hurried home to Savile Row \n-> as_fast_as_we_could\n\n\n=== as_fast_as_we_could === \n<> as fast as we could.\n`}</code></pre>\n    <h3>{`The story flow`}</h3>\n    <p>{`Knots and diverts combine to create the basic story flow of the game. This flow is \"flat\" - there's no call-stack, and diverts aren't \"returned\" from. `}</p>\n    <p>{`In most ink scripts, the story flow starts at the top, bounces around in a spaghetti-like mess, and eventually, hopefully, reaches a `}<inlineCode parentName=\"p\">{`-> END`}</inlineCode>{`.`}</p>\n    <p>{`The very loose structure means writers can get on and write, branching and rejoining without worrying about the structure that they're creating as they go. There's no boiler-plate to creating new branches or diversions, and no need to track any state.`}</p>\n    <h4>{`Advanced: Loops`}</h4>\n    <p>{`You absolutely can use diverts to create looped content, and `}<strong parentName=\"p\">{`ink`}</strong>{` has several features to exploit this, including ways to make the content vary itself, and ways to control how often options can be chosen. `}</p>\n    <p>{`See the sections on Varying Text and Conditional Options for more information.`}</p>\n    <p>{`Oh, and the following is legal and not a great idea:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`=== round ===\nand\n-> round\n`}</code></pre>\n    <h2>{`6) Includes and Stitches`}</h2>\n    <h3>{`Knots can be subdivided`}</h3>\n    <p>{`As stories get longer, they become more confusing to keep organised without some additional structure. `}</p>\n    <p>{`Knots can include sub-sections called \"stitches\". These are marked using a single equals sign.`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`=== the_orient_express ===\n= in_first_class \n    ...\n= in_third_class\n    ...\n= in_the_guards_van \n    ...\n= missed_the_train\n    ...\n`}</code></pre>\n    <p>{`One could use a knot for a scene, for instance, and stitches for the events within the scene.`}</p>\n    <h3>{`Stitches have unique names`}</h3>\n    <p>{`A stitch can be diverted to using its \"address\".`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`*   [Travel in third class]\n    -> the_orient_express.in_third_class\n\n*   [Travel in the guard's van]\n    -> the_orient_express.in_the_guards_van \n            \n`}</code></pre>\n    <h3>{`The first stitch is the default`}</h3>\n    <p>{`Diverting to a knot which contains stitches will divert to the first stitch in the knot. So:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`*   [Travel in first class]\n    \"First class, Monsieur. Where else?\"\n    -> the_orient_express\n`}</code></pre>\n    <p>{`is the same as:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`*   [Travel in first class]\n    \"First class, Monsieur. Where else?\"\n    -> the_orient_express.in_first_class \n    \n`}</code></pre>\n    <p>{`(...unless we move the order of the stitches around inside the knot!)`}</p>\n    <p>{`You can also include content at the top of a knot outside of any stitch. However, you need to remember to divert out of it - the engine `}<em parentName=\"p\">{`won't`}</em>{` automatically enter the first stitch once it's worked its way through the header content.`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`=== the_orient_express === \n\nWe boarded the train, but where?\n*   [First class] -> in_first_class\n*   [Second class] -> in_second_class\n\n= in_first_class \n    ...\n= in_second_class\n    ...\n`}</code></pre>\n    <h3>{`Local diverts`}</h3>\n    <p>{`From inside a knot, you don't need to use the full address for a stitch.`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`-> the_orient_express\n\n=== the_orient_express ===\n= in_first_class \n    I settled my master.\n    *   [Move to third class]\n        -> in_third_class\n\n= in_third_class\n    I put myself in third.\n`}</code></pre>\n    <p>{`This means stitches and knots can't share names, but several knots can contain the same stitch name. (So both the Orient Express and the SS Mongolia can have first class.) `}</p>\n    <p>{`The compiler will warn you if ambiguous names are used.`}</p>\n    <h3>{`Script files can be combined`}</h3>\n    <p>{`You can also split your content across multiple files, using an include statement.`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`INCLUDE newspaper.ink\nINCLUDE cities/vienna.ink\nINCLUDE journeys/orient_express.ink\n`}</code></pre>\n    <p>{`Include statements should always go at the top of a file, and not inside knots.`}</p>\n    <p>{`There are no rules about what file a knot must be in to be diverted to. (In other words, separating files has no effect on the game's namespacing).`}</p>\n    <h2>{`5) Varying Choices`}</h2>\n    <h3>{`Choices can only be used once`}</h3>\n    <p>{`By default, every choice in the game can only be chosen once. If you don't have loops in your story, you'll never notice this behaviour. But if you do use loops, you'll quickly notice your options disappearing...`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`=== find_help ===\n\n    You search desperately for a friendly face in the crowd. \n    *   The woman in the hat[?] pushes you roughly aside. -> find_help\n    *   The man with the briefcase[?] looks disgusted as you stumble past him. -> find_help \n    \n`}</code></pre>\n    <p>{`produces:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`You search desperately for a friendly face in the crowd.\n\n1: The woman in the hat?\n2: The man with the briefcase?\n\n> 1\nThe woman in the hat pushes you roughly aside.\nYou search desperately for a friendly face in the crowd.\n\n1: The man with the briefcase?\n\n> \n`}</code></pre>\n    <p>{`... and on the next loop you'll have no options left.`}</p>\n    <h4>{`Fallback choices`}</h4>\n    <p>{`The above example stops where it does, because the next choice ends up in an \"out of content\" run-time error. `}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`> 1\nThe man with the briefcase looks disgusted as you stumble past him.\nYou search desperately for a friendly face in the crowd.\n\nRuntime error in tests/test.ink line 6: ran out of content. Do you need a '-> DONE' or '-> END'?\n`}</code></pre>\n    <p>{`We can resolve this with a 'fallback choice'. Fallback choices are never displayed to the player, but are 'chosen' by the game if no other options exist. `}</p>\n    <p>{`A fallback choice is simply a \"choice without choice text\":`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`*   -> out_of_options\n`}</code></pre>\n    <p>{`And, in a slight abuse of syntax, we can make a default choice with content in it, using an \"choice then arrow\":`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`*   -> \n    Mulder never could explain how he got out of that burning box car. -> season_2\n`}</code></pre>\n    <h4>{`Example of a fallback choice`}</h4>\n    <p>{`Adding this into the previous example gives us: `}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`=== find_help ===\n\n    You search desperately for a friendly face in the crowd. \n    *   The woman in the hat[?] pushes you roughly aside. -> find_help\n    *   The man with the briefcase[?] looks disgusted as you stumble past him. -> find_help \n    *   ->\n        But it is too late: you collapse onto the station platform. This is the end.\n        -> END\n`}</code></pre>\n    <p>{`and produces:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`You search desperately for a friendly face in the crowd.\n\n1: The woman in the hat?\n2: The man with the briefcase?\n\n> 1\nThe woman in the hat pushes you roughly aside.\nYou search desperately for a friendly face in the crowd.\n\n1: The man with the briefcase?\n\n> 1\nThe man with the briefcase looks disgusted as you stumble past him.\nYou search desperately for a friendly face in the crowd.\nBut it is too late: you collapse onto the station platform. This is the end.\n`}</code></pre>\n    <h3>{`Sticky choices`}</h3>\n    <p>{`The 'once-only' behaviour is not always what we want, of course, so we have a second kind of choice: the \"sticky\" choice. A sticky choice is simply one that doesn't get used up, and is marked by a `}<inlineCode parentName=\"p\">{`+`}</inlineCode>{` bullet.`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`=== homers_couch ===\n    +   [Eat another donut]\n        You eat another donut. -> homers_couch\n    *   [Get off the couch] \n        You struggle up off the couch to go and compose epic poetry.\n        -> END\n`}</code></pre>\n    <p>{`Default choices can be sticky too.`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`=== conversation_loop \n    *   [Talk about the weather] -> chat_weather \n    *   [Talk about the children] -> chat_children \n    +   -> sit_in_silence_again\n`}</code></pre>\n    <h3>{`Conditional Choices`}</h3>\n    <p>{`You can also turn choices on and off by hand. `}<strong parentName=\"p\">{`ink`}</strong>{` has quite a lot of logic available, but the simplest tests is \"has the player seen a particular piece of content\".`}</p>\n    <p>{`Every knot/stitch in the game has a unique address (so it can be diverted to), and we use the same address to test if that piece of content has been seen. `}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`*   { not visit_paris }     [Go to Paris] -> visit_paris\n+   { visit_paris    }      [Return to Paris] -> visit_paris \n\n*   { visit_paris.met_estelle } [ Telephone Mme Estelle ] -> phone_estelle \n`}</code></pre>\n    <p>{`Note that the test `}<inlineCode parentName=\"p\">{`knot_name`}</inlineCode>{` is true if `}<em parentName=\"p\">{`any`}</em>{` stitch inside that knot has been seen.`}</p>\n    <p>{`Note also that conditionals don't override the once-only behaviour of options, so you'll still need sticky options for repeatable choices.`}</p>\n    <h4>{`Advanced: multiple conditions`}</h4>\n    <p>{`You can use several logical tests on an option; if you do, `}<em parentName=\"p\">{`all`}</em>{` the tests must all be passed for the option to appear.`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`*   { not visit_paris }     [Go to Paris] -> visit_paris\n+   { visit_paris } { not bored_of_paris } \n    [Return to Paris] -> visit_paris \n`}</code></pre>\n    <h4>{`Advanced: knot/stitch labels are actually read counts`}</h4>\n    <p>{`The test: `}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`*   {seen_clue} [Accuse Mr Jefferson]\n`}</code></pre>\n    <p>{`is actually testing an `}<em parentName=\"p\">{`integer`}</em>{` and not a true/false flag. A knot or stitch used this way is actually an integer variable containing the number of times the content at the address has been seen by the player. `}</p>\n    <p>{`If it's non-zero, it'll return true in a test like the one above, but you can also be more specific as well:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`* {seen_clue > 3} [Flat-out arrest Mr Jefferson]\n`}</code></pre>\n    <h4>{`Advanced: more logic`}</h4>\n    <p><strong parentName=\"p\">{`ink`}</strong>{` supports a lot more logic and conditionality than covered here - see the section on 'variables and logic'.`}</p>\n    <h2>{`6) Variable Text`}</h2>\n    <h3>{`Text can vary`}</h3>\n    <p>{`So far, all the content we've seen has been static, fixed pieces of text. But content can also vary at the moment of being printed. `}</p>\n    <h3>{`Sequences, cycles and other alternatives`}</h3>\n    <p>{`The simplest variations of text are provided by alternatives, which are selected from depending on some kind of rule. `}<strong parentName=\"p\">{`ink`}</strong>{` supports several types. Alternatives are written inside `}<inlineCode parentName=\"p\">{`{`}</inlineCode>{`...`}<inlineCode parentName=\"p\">{`}`}</inlineCode>{` curly brackets, with elements separated by `}<inlineCode parentName=\"p\">{`|`}</inlineCode>{` symbols (vertical divider lines).`}</p>\n    <p>{`These are only useful if a piece of content is visited more than once!`}</p>\n    <h4>{`Types of alternatives`}</h4>\n    <p><strong parentName=\"p\">{`Sequences`}</strong>{` (the default):`}</p>\n    <p>{`A sequence (or a \"stopping block\") is a set of alternatives that tracks how many times its been seen, and each time, shows the next element along. When it runs out of new content it continues the show the final element.`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`The radio hissed into life. {\"Three!\"|\"Two!\"|\"One!\"|There was the white noise racket of an explosion.|But it was just static.}\n\n{I bought a coffee with my five-pound note.|I bought a second coffee for my friend.|I didn't have enough money to buy any more coffee.}\n        \n`}</code></pre>\n    <p><strong parentName=\"p\">{`Cycles`}</strong>{` (marked with a `}<inlineCode parentName=\"p\">{`&`}</inlineCode>{`): `}</p>\n    <p>{`Cycles are like sequences, but they loop their content.`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`It was {&Monday|Tuesday|Wednesday|Thursday|Friday|Saturday|Sunday} today.\n`}</code></pre>\n    <p><strong parentName=\"p\">{`Once-only`}</strong>{` (marked with a `}<inlineCode parentName=\"p\">{`!`}</inlineCode>{`):`}</p>\n    <p>{`Once-only alternatives are like sequences, but when they run out of new content to display, they display nothing. (You can think of a once-only alternative as a sequence with a blank last entry.)`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`He told me a joke. {!I laughed politely.|I smiled.|I grimaced.|I promised myself to not react again.}\n`}</code></pre>\n    <p><strong parentName=\"p\">{`Shuffles`}</strong>{` (marked with a `}<inlineCode parentName=\"p\">{`~`}</inlineCode>{`):`}</p>\n    <p>{`Shuffles produce randomised output.`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`I tossed the coin. {~Heads|Tails}.\n`}</code></pre>\n    <h4>{`Features of Alternatives`}</h4>\n    <p>{`Alternatives can contain blank elements.`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`I took a step forward. {!||||Then the lights went out. -> eek}\n`}</code></pre>\n    <p>{`Alternatives can be nested.`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`The Ratbear {&{wastes no time and |}swipes|scratches} {&at you|into your {&leg|arm|cheek}}.\n`}</code></pre>\n    <p>{`Alternatives can include divert statements. `}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`I {waited.|waited some more.|snoozed.|woke up and waited more.|gave up and left. -> leave_post_office}\n`}</code></pre>\n    <p>{`They can also be used inside choice text:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`+   \"Hello, {&Master|Monsieur Fogg|you|brown-eyes}!\"[] I declared.\n`}</code></pre>\n    <p>{`(...with one caveat; you can't start an option's text with a `}<inlineCode parentName=\"p\">{`{`}</inlineCode>{`, as it'll look like a conditional.)`}</p>\n    <p>{`(...but the caveat has a caveat, if you escape a whitespace `}<inlineCode parentName=\"p\">{`\\\\\\\\`}</inlineCode>{` before your `}<inlineCode parentName=\"p\">{`{`}</inlineCode>{` ink will recognise it as text.)`}</p>\n    <h4>{`Examples`}</h4>\n    <p>{`Alternatives can be used inside loops to create the appearance of intelligent, state-tracking gameplay without particular effort.`}</p>\n    <p>{`Here's a one-knot version of whack-a-mole. Note we use once-only options, and a fallback, to ensure the mole doesn't move around, and the game will always end.`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`=== whack_a_mole ===\n    {I heft the hammer.|{~Missed!|Nothing!|No good. Where is he?|Ah-ha! Got him! -> END}}\n    The {&mole|{&nasty|blasted|foul} {&creature|rodent}} is {in here somewhere|hiding somewhere|still at large|laughing at me|still unwhacked|doomed}. <>\n    {!I'll show him!|But this time he won't escape!}\n    *   [{&Hit|Smash|Try} top-left]     -> whack_a_mole\n    *  [{&Whallop|Splat|Whack} top-right] -> whack_a_mole\n    *  [{&Blast|Hammer} middle] -> whack_a_mole\n    *  [{&Clobber|Bosh} bottom-left]    -> whack_a_mole\n    *  [{&Nail|Thump} bottom-right]     -> whack_a_mole\n    *  [] Then you collapse from hunger. The mole has defeated you! \n        -> END\n`}</code></pre>\n    <p>{`produces the following 'game':`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`I heft the hammer.\nThe mole is in here somewhere. I'll show him!\n\n1: Hit top-left\n2: Whallop top-right\n3: Blast middle\n4: Clobber bottom-left\n5: Nail bottom-right\n\n> 1\nMissed!\nThe nasty creature is hiding somewhere. But this time he won't escape!\n\n1: Splat top-right\n2: Hammer middle\n3: Bosh bottom-left\n4: Thump bottom-right\n\n> 4\nNothing!\nThe mole is still at large. \n1: Whack top-right\n2: Blast middle\n3: Clobber bottom-left\n\n> 2\nWhere is he?\nThe blasted rodent is laughing at me. \n1: Whallop top-right\n2: Bosh bottom-left\n\n> 1\nAh-ha! Got him!\n`}</code></pre>\n    <p>{`And here's a bit of lifestyle advice. Note the sticky choice - the lure of the television will never fade:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`=== turn_on_television === \nI turned on the television {for the first time|for the second time|again|once more}, but there was {nothing good on, so I turned it off again|still nothing worth watching|even less to hold my interest than before|nothing but rubbish|a program about sharks and I don't like sharks|nothing on}.\n+   [Try it again]          -> turn_on_television\n*   [Go outside instead]    -> go_outside_instead\n\n=== go_outside_instead ===\n-> END\n`}</code></pre>\n    <h4>{`Sneak Preview: Multiline alternatives`}</h4>\n    <p><strong parentName=\"p\">{`ink`}</strong>{` has another format for making alternatives of varying content blocks, too. See the section on \"multiline blocks\" for details.`}</p>\n    <h3>{`Conditional Text`}</h3>\n    <p>{`Text can also vary depending on logical tests, just as options can.`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`{met_blofeld: \"I saw him. Only for a moment.\" }\n`}</code></pre>\n    <p>{`and`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`\"His real name was {met_blofeld.learned_his_name: Franz|a secret}.\"\n`}</code></pre>\n    <p>{`These can appear as separate lines, or within a section of content. They can even be nested, so:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`{met_blofeld: \"I saw him. Only for a moment. His real name was {met_blofeld.learned_his_name: Franz|kept a secret}.\" | \"I missed him. Was he particularly evil?\" }\n`}</code></pre>\n    <p>{`can produce either:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`\"I saw him. Only for a moment. His real name was Franz.\"\n`}</code></pre>\n    <p>{`or:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`\"I saw him. Only for a moment. His real name was kept a secret.\"\n`}</code></pre>\n    <p>{`or: `}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`\"I missed him. Was he particularly evil?\"\n`}</code></pre>\n    <h2>{`7) Game Queries`}</h2>\n    <p><strong parentName=\"p\">{`ink`}</strong>{` provides a few useful 'game level' queries about game state, for use in conditional logic. They're not quite parts of the language, but they're always available, and they can't be edited by the author. In a sense, they're the \"standard library functions\" of the language.`}</p>\n    <p>{`The convention is to name these in capital letters.`}</p>\n    <h3>{`CHOICE_COUNT`}</h3>\n    <p><inlineCode parentName=\"p\">{`CHOICE_COUNT`}</inlineCode>{` returns the number of options created so far in the current chunk. So for instance.`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`*   {false} Option A\n*   {true} Option B\n*  {CHOICE_COUNT() == 1} Option C\n`}</code></pre>\n    <p>{`produces two options, B and C. This can be useful for controlling how many options a player gets on a turn. `}</p>\n    <h3>{`TURNS_SINCE`}</h3>\n    <p><inlineCode parentName=\"p\">{`TURNS_SINCE`}</inlineCode>{` returns the number of moves (formally, player inputs) since a particular knot/stitch was last visited.`}</p>\n    <p>{`A value of 0 means \"was seen as part of the current chunk\". A value of -1 means \"has never been seen\". Any other positive value means it has been seen that many turns ago.`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`*   {TURNS_SINCE(-> sleeping.intro) > 10} You are feeling tired... -> sleeping \n*   {TURNS_SINCE(-> laugh) == 0}  You try to stop laughing.\n`}</code></pre>\n    <p>{`Note that the parameter passed to `}<inlineCode parentName=\"p\">{`TURNS_SINCE`}</inlineCode>{` is a \"divert target\", not simply the knot address itself (because the knot address is a number - the read count - not a location in the story...)`}</p>\n    <p>{`TODO: (requirement of passing `}<inlineCode parentName=\"p\">{`-c`}</inlineCode>{` to the compiler)`}</p>\n    <h4>{`Advanced: more queries`}</h4>\n    <p>{`You can make your own external functions, though the syntax is a bit different: see the section on functions below.`}</p>\n    </MDXLayout>;\n}\n\nMDXContent.isMDXComponent = true;\n  ","/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\n\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1>{`Part Two: Weave`}</h1>\n    <p>{`So far, we've been building branched stories in the simplest way, with \"options\" that link to \"pages\". `}</p>\n    <p>{`But this requires us to uniquely name every destination in the story, which can slow down writing and discourage minor branching. `}</p>\n    <p><strong parentName=\"p\">{`ink`}</strong>{` has a much more powerful syntax available, designed for simplifying story flows which have an always-forwards direction (as most stories do, and most computer programs don't).`}</p>\n    <p>{`This format is called \"weave\", and its built out of the basic content/option syntax with two new features: the gather mark, `}<inlineCode parentName=\"p\">{`-`}</inlineCode>{`, and the nesting of choices and gathers.`}</p>\n    <h2>{`1) Gathers`}</h2>\n    <h3>{`Gather points gather the flow back together`}</h3>\n    <p>{`Let's go back to the first multi-choice example at the top of this document. `}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`\"What's that?\" my master asked.\n    *   \"I am somewhat tired[.\"],\" I repeated.\n        \"Really,\" he responded. \"How deleterious.\"\n    *   \"Nothing, Monsieur!\"[] I replied.\n    *  \"I said, this journey is appalling[.\"] and I want no more of it.\"\n        \"Ah,\" he replied, not unkindly. \"I see you are feeling frustrated. Tomorrow, things will improve.\"\n    \n`}</code></pre>\n    <p>{`In a real game, all three of these options might well lead to the same conclusion - Monsieur Fogg leaves the room. We can do this using a gather, without the need to create any new knots, or add any diverts.`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`\"What's that?\" my master asked.\n    *   \"I am somewhat tired[.\"],\" I repeated.\n        \"Really,\" he responded. \"How deleterious.\"\n    *   \"Nothing, Monsieur!\"[] I replied.\n        \"Very good, then.\"\n    *  \"I said, this journey is appalling[.\"] and I want no more of it.\"\n    \"Ah,\" he replied, not unkindly. \"I see you are feeling frustrated. Tomorrow, things will improve.\"\n\n-   With that Monsieur Fogg left the room.\n`}</code></pre>\n    <p>{`This produces the following playthrough:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`\"What's that?\" my master asked.\n\n1: \"I am somewhat tired.\"\n2: \"Nothing, Monsieur!\"\n3: \"I said, this journey is appalling.\"\n\n> 1\n\"I am somewhat tired,\" I repeated.\n\"Really,\" he responded. \"How deleterious.\"\nWith that Monsieur Fogg left the room.\n`}</code></pre>\n    <h3>{`Options and gathers form chains of content`}</h3>\n    <p>{`We can string these gather-and-branch sections together to make branchy sequences that always run forwards.`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`=== escape === \nI ran through the forest, the dogs snapping at my heels.\n\n    *   I checked the jewels[] were still in my pocket, and the feel of them brought a spring to my step. <>\n    \n    *  I did not pause for breath[] but kept on running. <>\n\n    *   I cheered with joy. <>\n\n-   The road could not be much further! Mackie would have the engine running, and then I'd be safe.\n  \n    *   I reached the road and looked about[]. And would you believe it?\n    *   I should interrupt to say Mackie is normally very reliable[]. He's never once let me down. Or rather, never once, previously to that night.\n\n-   The road was empty. Mackie was nowhere to be seen.\n`}</code></pre>\n    <p>{`This is the most basic kind of weave. The rest of this section details  additional features that allow weaves to nest, contain side-tracks and diversions, divert within themselves, and above all, reference earlier choices to influence later ones.`}</p>\n    <h4>{`The weave philsophy`}</h4>\n    <p>{`Weaves are more than just a convenient encapsulation of branching flow; they're also a way to author more robust content. The `}<inlineCode parentName=\"p\">{`escape`}</inlineCode>{` example above has already four possible routes through, and a more complex sequence might have lots and lots more. Using normal diverts, one has to check the links by chasing the diverts from point to point and it's easy for errors to creep in. `}</p>\n    <p>{`With a weave, the flow is guaranteed to start at the top and \"fall\" to the bottom. Flow errors are impossible in a basic weave structure, and the output text can be easily skim read. That means there's no need to actually test all the branches in game to be sure they work as intended.`}</p>\n    <p>{`Weaves also allow for easy redrafting of choice-points; in particular, it's easy to break a sentence up and insert additional choices for variety or pacing reasons, without having to re-engineer any flow.`}</p>\n    <h2>{`2) Nested Flow`}</h2>\n    <p>{`The weaves shown above are quite simple, \"flat\" structures. Whatever the player does, they take the same number of turns to get from top to bottom. However, sometimes certain choices warrant a bit more depth or complexity. `}</p>\n    <p>{`For that, we allow weaves to nest.`}</p>\n    <p>{`This section comes with a warning. Nested weaves are very powerful and very compact, but they can take a bit of getting used to! `}</p>\n    <h3>{`Options can be nested`}</h3>\n    <p>{`Consider the following scene:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`-   \"Well, Poirot? Murder or suicide?\"\n*   \"Murder!\"\n*   \"Suicide!\"\n-   Ms. Christie lowered her manuscript a moment. The rest of the writing group sat, open-mouthed.\n`}</code></pre>\n    <p>{`The first choice presented is \"Murder!\" or \"Suicide!\". If Poirot declares a suicide, there's no more to do, but in the case of murder, there's a follow-up question needed - who does he suspect? `}</p>\n    <p>{`We can add new options via a set of nested sub-choices. We tell the script that these new choices are \"part of\" another choice by using two asterisks, instead of just one. `}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`-   \"Well, Poirot? Murder or suicide?\"\n    *   \"Murder!\"\n        \"And who did it?\"\n        * *     \"Detective-Inspector Japp!\"\n        * *     \"Captain Hastings!\"\n        * *     \"Myself!\"\n    *   \"Suicide!\"\n    -   Mrs. Christie lowered her manuscript a moment. The rest of the writing group sat, open-mouthed.\n    \n`}</code></pre>\n    <p>{`(Note that it's good style to also indent the lines to show the nesting, but the compiler doesn't mind.)`}</p>\n    <p>{`And should we want to add new sub-options to the other route, we do that in similar fashion.`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`-   \"Well, Poirot? Murder or suicide?\"\n    *   \"Murder!\"\n        \"And who did it?\"\n        * *     \"Detective-Inspector Japp!\"\n        * *     \"Captain Hastings!\"\n        * *     \"Myself!\"\n    *   \"Suicide!\"\n        \"Really, Poirot? Are you quite sure?\"\n        * *     \"Quite sure.\"\n        * *     \"It is perfectly obvious.\"\n    -   Mrs. Christie lowered her manuscript a moment. The rest of the writing group sat, open-mouthed.\n`}</code></pre>\n    <p>{`Now, that initial choice of accusation will lead to specific follow-up questions - but either way, the flow will come back together at the gather point, for Mrs. Christie's cameo appearance.`}</p>\n    <p>{`But what if we want a more extended sub-scene?`}</p>\n    <h3>{`Gather points can be nested too`}</h3>\n    <p>{`Sometimes, it's not a question of expanding the number of options, but having more than one additional beat of story. We can do this by nesting gather points as well as options.`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`-   \"Well, Poirot? Murder or suicide?\"\n        *   \"Murder!\"\n            \"And who did it?\"\n            * *     \"Detective-Inspector Japp!\"\n            * *     \"Captain Hastings!\"\n            * *     \"Myself!\"\n            - -     \"You must be joking!\"\n            * *     \"Mon ami, I am deadly serious.\"\n            * *     \"If only...\"\n        *   \"Suicide!\"\n            \"Really, Poirot? Are you quite sure?\"\n            * *     \"Quite sure.\"\n            * *     \"It is perfectly obvious.\"\n        -   Mrs. Christie lowered her manuscript a moment. The rest of the writing group sat, open-mouthed.\n`}</code></pre>\n    <p>{`If the player chooses the \"murder\" option, they'll have two choices in a row on their sub-branch - a whole flat weave, just for them. `}</p>\n    <h4>{`Advanced: What gathers do`}</h4>\n    <p>{`Gathers are hopefully intuitive, but their behaviour is a little harder to put into words: in general, after an option has been taken, the story finds the next gather down that isn't on a lower level, and diverts to it. `}</p>\n    <p>{`The basic idea is this: options separate the paths of the story, and gathers bring them back together. (Hence the name, \"weave\"!)`}</p>\n    <h3>{`You can nest as many levels are you like`}</h3>\n    <p>{`Above, we used two levels of nesting; the main flow, and the sub-flow. But there's no limit to how many levels deep you can go.`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`-   \"Tell us a tale, Captain!\"\n    *   \"Very well, you sea-dogs. Here's a tale...\"\n        * *     \"It was a dark and stormy night...\" \n                * * *   \"...and the crew were restless...\" \n                        * * * *  \"... and they said to their Captain...\" \n                                * * * * *       \"...Tell us a tale Captain!\"\n    *   \"No, it's past your bed-time.\"\n`}</code></pre>\n    <p>{` \t-\tTo a man, the crew began to yawn.`}</p>\n    <p>{`After a while, this sub-nesting gets hard to read and manipulate, so it's good style to divert away to a new stitch if a side-choice goes unwieldy. `}</p>\n    <p>{`But, in theory at least, you could write your entire story as a single weave.`}</p>\n    <h3>{`Example: a conversation with nested nodes`}</h3>\n    <p>{`Here's a longer example:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`- I looked at Monsieur Fogg \n*   ... and I could contain myself no longer.\n    'What is the purpose of our journey, Monsieur?'\n    'A wager,' he replied.\n    * *     'A wager!'[] I returned.\n            He nodded. \n            * * *   'But surely that is foolishness!'\n            * * *  'A most serious matter then!'\n            - - -   He nodded again.\n            * * *   'But can we win?'\n                    'That is what we will endeavour to find out,' he answered.\n            * * *   'A modest wager, I trust?'\n                    'Twenty thousand pounds,' he replied, quite flatly.\n            * * *   I asked nothing further of him then[.], and after a final, polite cough, he offered nothing more to me. <>\n    * *     'Ah[.'],' I replied, uncertain what I thought.\n    - -     After that, <>\n*   ... but I said nothing[] and <> \n- we passed the day in silence.\n- -> END\n`}</code></pre>\n    <p>{`with a couple of possible playthroughs. A short one:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`I looked at Monsieur Fogg\n\n1: ... and I could contain myself no longer.\n2: ... but I said nothing\n\n> 2\n... but I said nothing and we passed the day in silence.\n`}</code></pre>\n    <p>{`and a longer one:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`I looked at Monsieur Fogg\n\n1: ... and I could contain myself no longer.\n2: ... but I said nothing\n\n> 1\n... and I could contain myself no longer.\n'What is the purpose of our journey, Monsieur?'\n'A wager,' he replied.\n\n1: 'A wager!'\n2: 'Ah.'\n\n> 1\n'A wager!' I returned.\nHe nodded.\n\n1: 'But surely that is foolishness!'\n2: 'A most serious matter then!'\n\n> 2\n'A most serious matter then!'\nHe nodded again.\n\n1: 'But can we win?'\n2: 'A modest wager, I trust?'\n3: I asked nothing further of him then.\n\n> 2\n'A modest wager, I trust?'\n'Twenty thousand pounds,' he replied, quite flatly.\nAfter that, we passed the day in silence.\n`}</code></pre>\n    <p>{`Hopefully, this demonstrates the philosophy laid out above: that weaves offer a compact way to offer a lot of branching, a lot of choices, but with the guarantee of getting from beginning to end!`}</p>\n    <h2>{`3) Tracking a Weave`}</h2>\n    <p>{`Sometimes, the weave structure is sufficient. But when it's not, we need a bit more control.`}</p>\n    <h3>{`Weaves are largely unaddressed`}</h3>\n    <p>{`By default, lines of content in a weave don't have an address or label, which means they can't be diverted to, and they can't be tested for. In the most basic weave structure, choices vary the path the player takes through the weave and what they see, but once the weave is finished those choices and that path are forgotten.`}</p>\n    <p>{`But should we want to remember what the player has seen, we can - we add in labels where they're needed using the `}<inlineCode parentName=\"p\">{`(label_name)`}</inlineCode>{` syntax.`}</p>\n    <h3>{`Gathers and options can be labelled`}</h3>\n    <p>{`Gather points at any nested level can be labelled using brackets.`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`-  (top) \n`}</code></pre>\n    <p>{`Once labelled, gather points can be diverted to, or tested for in conditionals, just like knots and stitches. This means you can use previous decisions to alter later outcomes inside the weave, while still keeping all the advantages of a clear, reliable forward-flow.`}</p>\n    <p>{`Options can also be labelled, just like gather points, using brackets. Label brackets come before conditions in the line.`}</p>\n    <p>{`These addresses can be used in conditional tests, which can be useful for creating options unlocked by other options.`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`=== meet_guard ===\nThe guard frowns at you.\n\n*   (greet) [Greet him]\n    'Greetings.'\n*   (get_out) 'Get out of my way[.'],' you tell the guard.\n\n-   'Hmm,' replies the guard.\n\n*   {greet}     'Having a nice day?' // only if you greeted him\n\n*   'Hmm?'[] you reply.\n\n*   {get_out} [Shove him aside]      // only if you threatened him\n    You shove him sharply. He stares in reply, and draws his sword!\n    -> fight_guard          // this route diverts out of the weave\n\n-   'Mff,' the guard replies, and then offers you a paper bag. 'Toffee?'\n`}</code></pre>\n    <h3>{`Scope`}</h3>\n    <p>{`Inside the same block of weave, you can simply use the label name; from outside the block you need a path, either to a different stitch within the same knot:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`=== knot ===\n= stitch_one \n    - (gatherpoint) Some content.\n= stitch_two \n    *   {stitch_one.gatherpoint} Option\n`}</code></pre>\n    <p>{`or pointing into another knot:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`=== knot_one ===\n-   (gather_one)\n    * {knot_two.stitch_two.gather_two} Option\n    \n=== knot_two ===\n= stitch_two \n    - (gather_two) \n        *   {knot_one.gather_one} Option\n`}</code></pre>\n    <h4>{`Advanced: all options can be labelled`}</h4>\n    <p>{`In truth, all content in ink is a weave, even if there are no gathers in sight. That means you can label `}<em parentName=\"p\">{`any`}</em>{` option in the game with a bracket label, and then reference it using the addressing syntax. In particular, this means you can test `}<em parentName=\"p\">{`which`}</em>{` option a player took to reach a particular outcome.`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`=== fight_guard ===\n...\n= throw_something \n*   (rock) [Throw rock at guard] -> throw\n*   (sand) [Throw sand at guard] -> throw\n\n= throw\nYou hurl {throw_something.rock:a rock|a handful of sand} at the guard.\n`}</code></pre>\n    <h4>{`Advanced: Loops in a weave`}</h4>\n    <p>{`Labelling allows us to create loops inside weaves. Here's a standard pattern for asking questions of an NPC.`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`- (opts)\n    *   'Can I get a uniform from somewhere?'[] you ask the cheerful guard.\n        'Sure. In the locker.' He grins. 'Don't think it'll fit you, though.'\n    *   'Tell me about the security system.'\n        'It's ancient,' the guard assures you. 'Old as coal.'\n    *   'Are there dogs?'\n        'Hundreds,' the guard answers, with a toothy grin. 'Hungry devils, too.'\n    // We require the player to ask at least one question\n    *   {loop} [Enough talking] \n        -> done\n- (loop) \n    // loop a few times before the guard gets bored\n    { -> opts | -> opts | }\n    He scratches his head.\n    'Well, can't stand around talking all day,' he declares. \n- (done)\n    You thank the guard, and move away. \n`}</code></pre>\n    <h4>{`Advanced: diverting to options`}</h4>\n    <p>{`Options can also be diverted to: but the divert goes to the output of having chosen that choice, `}<em parentName=\"p\">{`as though the choice had been chosen`}</em>{`. So the content printed will ignore square bracketed text, and if the option is once-only, it will be marked as used up.`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`- (opts)\n*   [Pull a face]\n    You pull a face, and the soldier comes at you! -> shove\n\n*   (shove) [Shove the guard aside] You shove the guard to one side, but he comes back swinging.\n\n*   {shove} [Grapple and fight] -> fight_the_guard\n\n-   -> opts\n`}</code></pre>\n    <p>{`produces: `}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`1: Pull a face\n2: Shove the guard aside\n\n> 1\nYou pull a face, and the soldier comes at you! You shove the guard to one side, but he comes back swinging.\n\n1: Grapple and fight\n\n>\n`}</code></pre>\n    <h4>{`Advanced: Gathers directly after an option`}</h4>\n    <p>{`The following is valid, and frequently useful.`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`*   \"Are you quite well, Monsieur?\"[] I asked.\n    - - (quitewell) \"Quite well,\" he replied. \n*   \"How did you do at the crossword, Monsieur?\"[] I asked.\n    -> quitewell \n*   I said nothing[] and neither did my Master.\n-   We feel into companionable silence once more.\n`}</code></pre>\n    <p>{`Note the level 2 gather point directly below the first option: there's nothing to gather here, really, but it gives us a handy place to divert the second option to. `}</p>\n    </MDXLayout>;\n}\n\nMDXContent.isMDXComponent = true;\n  ","/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\n\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1>{`Part Three: Variables and Logic`}</h1>\n    <p>{`So far we've made conditional text, and conditional choices, using tests based on what content the player has seen so far. `}</p>\n    <p><strong parentName=\"p\">{`ink`}</strong>{` also supports variables, both temporary and global, storing numerical and content data, or even story flow commands. It is fully-featured in terms of logic, and contains a few additional structures to help keep the often complex logic of a branching story better organised.`}</p>\n    <h2>{`1) Global Variables`}</h2>\n    <p>{`The most powerful kind of variable, and arguably the most useful for a story, is a variable to store some unique property about the state of the game - anything from the amount of money in the protagonist's pocket, to a value representing the protagonist's state of mind. `}</p>\n    <p>{`This kind of variable is called \"global\" because it can be accessed from anywhere in the story - both set, and read from. (Traditionally, programming tries to avoid this kind of thing, as it allows one part of a program to mess with another, unrelated part. But a story is a story, and stories are all about consequences: what happens in Vegas rarely stays there.)`}</p>\n    <h3>{`Defining Global Variables`}</h3>\n    <p>{`Global variables can be defined anywhere, via a `}<inlineCode parentName=\"p\">{`VAR`}</inlineCode>{` statement. They should be given an initial value, which defines what type of variable they are - integer, floating point (decimal), content, or a story address.`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`VAR knowledge_of_the_cure = false\nVAR players_name = \"Emilia\"\nVAR number_of_infected_people = 521\nVAR current_epilogue = -> they_all_die_of_the_plague\n`}</code></pre>\n    <h3>{`Using Global Variables`}</h3>\n    <p>{`We can test global variables to control options, and provide conditional text, in a similar way to what we have previously seen.`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`=== the_train ===\n    The train jolted and rattled. { mood > 0:I was feeling positive enough, however, and did not mind the odd bump|It was more than I could bear}.\n    *   { not knows_about_wager } 'But, Monsieur, why are we travelling?'[] I asked.\n    *   { knows_about_wager} I contemplated our strange adventure[]. Would it be possible?\n`}</code></pre>\n    <h4>{`Advanced: storing diverts as variables`}</h4>\n    <p>{`A \"divert\" statement is actually a type of value in itself, and can be stored, altered, and diverted to. `}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`VAR     current_epilogue = -> everybody_dies \n\n=== continue_or_quit ===\nGive up now, or keep trying to save your Kingdom?\n*  [Keep trying!]   -> more_hopeless_introspection\n*  [Give up]        -> current_epilogue\n`}</code></pre>\n    <h4>{`Advanced: Global variables are externally visible`}</h4>\n    <p>{`Global variables can be accessed, and altered, from the runtime as well from the story, so provide a good way to communicate between the wider game and the story. `}</p>\n    <p>{`The `}<strong parentName=\"p\">{`ink`}</strong>{` layer is often be a good place to store gameplay-variables; there's no save/load issues to consider, and the story itself can react to the current values. `}</p>\n    <h3>{`Printing variables`}</h3>\n    <p>{`The value of a variable can be printed as content using an inline syntax similar to sequences, and conditional text:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`VAR friendly_name_of_player = \"Jackie\"\nVAR age = 23\n\nMy name is Jean Passepartout, but my friend's call me {friendly_name_of_player}. I'm {age} years old.\n`}</code></pre>\n    <p>{`This can be useful in debugging. For more complex printing based on logic and variables, see the section on functions.`}</p>\n    <h3>{`Evaluating strings`}</h3>\n    <p>{`It might be noticed that above we refered to variables as being able to contain \"content\", rather than \"strings\". That was deliberate, because a string defined in ink can contain ink - although it will always evaluate to a string. (Yikes!)`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`VAR a_colour = \"\"\n\n~ a_colour = \"{~red|blue|green|yellow}\" \n\n{a_colour} \n`}</code></pre>\n    <p>{`... produces one of red, blue, green or yellow. `}</p>\n    <p>{`Note that once a piece of content like this is evaluated, its value is \"sticky\". (The quantum state collapses.) So the following:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`The goon hits you, and sparks fly before you eyes, {a_colour} and {a_colour}.\n`}</code></pre>\n    <p>{`... won't produce a very interesting effect. (If you really want this to work, use a text function to print the colour!)`}</p>\n    <p>{`This is also why `}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`VAR a_colour = \"{~red|blue|green|yellow}\"\n`}</code></pre>\n    <p>{`is explicitly disallowed; it would be evaluated on the construction of the story, which probably isn't what you want.`}</p>\n    <h2>{`2) Logic`}</h2>\n    <p>{`Obviously, our global variables are not intended to be constants, so we need a syntax for altering them. `}</p>\n    <p>{`Since by default, any text in an `}<strong parentName=\"p\">{`ink`}</strong>{` script is printed out directly to the screen, we use a markup symbol to indicate that a line of content is intended meant to be doing some numerical work, we use the `}<inlineCode parentName=\"p\">{`~`}</inlineCode>{` mark. `}</p>\n    <p>{`The following statements all assign values to variables:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`=== set_some_variables ===\n    ~ knows_about_wager = true  \n    ~ x = (x * x) - (y * y) + c\n    ~ y = 2 * x * y\n    \n`}</code></pre>\n    <p>{`and the following will test conditions:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`{ x == 1.2 }\n{ x / 2 > 4 }\n{ y - 1 <= x * x }\n`}</code></pre>\n    <h3>{`Mathematics`}</h3>\n    <p><strong parentName=\"p\">{`ink`}</strong>{` supports the four basic mathematical operations (`}<inlineCode parentName=\"p\">{`+`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`-`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`*`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`/`}</inlineCode>{`), as well as `}<inlineCode parentName=\"p\">{`%`}</inlineCode>{` (or `}<inlineCode parentName=\"p\">{`mod`}</inlineCode>{`), which returns the remainder after integer division. `}</p>\n    <p>{`If more complex operations are required, one can write functions (using recursion if necessary), or call out to external, game-code functions (for anything more advanced). `}</p>\n    <h4>{`Advanced: numerical types are implicit`}</h4>\n    <p>{`Results of operations - in particular, for division - are typed based on the type of the input. So integer division returns integer, but floating point division returns floating point results. `}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`~ x = 2 / 3\n~ y = 7 / 3\n~ z = 1.2 / 0.5\n`}</code></pre>\n    <p>{`assigns `}<inlineCode parentName=\"p\">{`x`}</inlineCode>{` to be 0, `}<inlineCode parentName=\"p\">{`y`}</inlineCode>{` to be 2 and `}<inlineCode parentName=\"p\">{`z`}</inlineCode>{` to be 2.4.`}</p>\n    <h3>{`String queries`}</h3>\n    <p>{`Oddly for a text-engine, `}<strong parentName=\"p\">{`ink`}</strong>{` doesn't have much in the way of string-handling: it's assumed that any string conversion you need to do will be handled by the game code (and perhaps by external functions.) But we support three basic queries - equality, inequality, and substring (which we call ? for reasons that will become clear in a later chapter). `}</p>\n    <p>{`The following all return true:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`{ \"Yes, please.\" == \"Yes, please.\" }\n{ \"No, thank you.\" != \"Yes, please.\" }\n{ \"Yes, please\" ? \"ease\" }\n`}</code></pre>\n    <h2>{`3) Conditional blocks (if/else)`}</h2>\n    <p>{`We've seen conditionals used to control options and story content; `}<strong parentName=\"p\">{`ink`}</strong>{` also provides an equivalent of the normal if/else-if/else structure. `}</p>\n    <h3>{`A simple 'if'`}</h3>\n    <p>{`The if syntax takes its cue from the other conditionals used so far, with the `}<inlineCode parentName=\"p\">{`{`}</inlineCode>{`...`}<inlineCode parentName=\"p\">{`}`}</inlineCode>{` syntax indicating that something is being tested.`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`{ x > 0:\n    ~ y = x - 1\n}\n`}</code></pre>\n    <p>{`Else conditions can be provided:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`{ x > 0:\n    ~ y = x - 1\n- else:\n    ~ y = x + 1\n}\n`}</code></pre>\n    <h3>{`Extended if/else if/else blocks`}</h3>\n    <p>{`The above syntax is actually a specific case of a more general structure, something like a \"switch\" statement of another language:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`{\n    - x > 0: \n        ~ y = x - 1\n    - else: \n        ~ y = x + 1\n}\n`}</code></pre>\n    <p>{`And using this form we can include 'else-if' conditions:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`{ \n    - x == 0:\n        ~ y = 0\n    - x > 0:\n        ~ y = x - 1\n    - else:\n        ~ y = x + 1\n}\n`}</code></pre>\n    <p>{`(Note, as with everything else, the white-space is purely for readability and has no syntactic meaning.)`}</p>\n    <h3>{`Switch blocks`}</h3>\n    <p>{`And there's also an actual switch statement: `}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`{ x:\n- 0:    zero \n- 1:    one \n- 2:    two \n- else: lots\n}\n`}</code></pre>\n    <h4>{`Example: context-relevant content`}</h4>\n    <p>{`Note these tests don't have to be variable-based and can use read-counts, just as other conditionals can, and the following construction is quite frequent, as a way of saying \"do some content which is relevant to the current game state\":`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`=== dream ===\n    {\n        - visited_snakes && not dream_about_snakes:\n            ~ fear++\n            -> dream_about_snakes\n\n        - visited_poland && not dream_about_polish_beer:\n            ~ fear--\n            -> dream_about_polish_beer \n\n        - else:\n            // breakfast-based dreams have no effect\n            -> dream_about_marmalade\n    }   \n`}</code></pre>\n    <p>{`The syntax has the advantage of being easy to extend, and prioritise.`}</p>\n    <h3>{`Conditional blocks are not limited to logic`}</h3>\n    <p>{`Conditional blocks can be used to control story content as well as logic:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`I stared at Monsieur Fogg.\n{ know_about_wager:\n    <> \"But surely you are not serious?\" I demanded.\n- else:\n    <> \"But there must be a reason for this trip,\" I observed.\n}\nHe said nothing in reply, merely considering his newspaper with as much thoroughness as entomologist considering his latest pinned addition.\n`}</code></pre>\n    <p>{`You can even put options inside conditional blocks:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`{ door_open:\n    *   I strode out of the compartment[] and I fancied I heard my master quietly tutting to himself.           -> go_outside \n- else:\n    *   I asked permission to leave[] and Monsieur Fogg looked surprised.   -> open_door \n    *   I stood and went to open the door[]. Monsieur Fogg seemed untroubled by this small rebellion. -> open_door\n}\n`}</code></pre>\n    <p>{`...but note that the lack of weave-syntax and nesting in the above example isn't accidental: to avoid confusing the various kinds of nesting at work, you aren't allowed to include gather points inside conditional blocks.`}</p>\n    <h3>{`Multiline blocks`}</h3>\n    <p>{`There's one other class of multiline block, which expands on the alternatives system from above. The following are all valid and do what you might expect:`}</p>\n    <p>{` \t// Sequence: go through the alternatives, and stick on last\n{ stopping:\n-\tI entered the casino.\n-  I entered the casino again.\n-  Once more, I went inside.\n}`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`// Shuffle: show one at random\nAt the table, I drew a card. <>\n{ shuffle:\n    -   Ace of Hearts.\n    -   King of Spades.\n    -   2 of Diamonds.\n        'You lose!' crowed the croupier.\n        -> leave_casino\n}\n\n// Cycle: show each in turn, and then cycle\n{ cycle:\n    - I held my breath.\n    - I waited impatiently.\n    - I paused.\n}\n\n// Once: show each, once, in turn, until all have been shown\n{ once:\n    - Would my luck hold?\n    - Could I win the hand?\n}\n`}</code></pre>\n    <h2>{`4) Temporary Variables`}</h2>\n    <h3>{`Temporary variables are for scratch calculations`}</h3>\n    <p>{`Sometimes, a global variable is unwieldy. `}<strong parentName=\"p\">{`ink`}</strong>{` provides temporary variables for quick calculations of things.  `}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`=== near_north_pole ===\n    ~ temp number_of_warm_things = 0\n    { blanket:\n        ~ number_of_warm_things++\n    }\n    { ear_muffs:\n        ~ number_of_warm_things++\n    }\n    { gloves:\n        ~ number_of_warm_things++\n    }\n    { number_of_warm_things > 2:\n        Despite the snow, I felt incorrigibly snug.\n    - else:\n        That night I was colder than I have ever been.\n    }\n`}</code></pre>\n    <p>{`The value in a temporary variable is thrown away after the story leaves the stitch in which it was defined. `}</p>\n    <h3>{`Knots and stitches can take parameters`}</h3>\n    <p>{`A particularly useful form of temporary variable is a parameter. Any knot or stitch can be given a value as a parameter.`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`*   [Accuse Hasting]\n        -> accuse(\"Hastings\")\n*   [Accuse Mrs Black]\n        -> accuse(\"Claudia\")\n*   [Accuse myself] \n        -> accuse(\"myself\")\n        \n=== accuse(who) ===\n    \"I accuse {who}!\" Poirot declared.\n    \"Really?\" Japp replied. \"{who == \"myself\":You did it?|{who}?}\"\n    \"And why not?\" Poirot shot back.    \n    \n`}</code></pre>\n    <p>{`... and you'll need to use parameters if you want to pass a temporary value from one stitch to another!\t`}</p>\n    <h4>{`Example: a recursive knot definition`}</h4>\n    <p>{`Temporary variables are safe to use in recursion (unlike globals), so the following will work.`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`-> add_one_to_one_hundred(0, 1)\n\n=== add_one_to_one_hundred(total, x) ===\n    ~ total = total + x\n    { x == 100:\n        -> finished(total)\n    - else:\n        -> add_one_to_one_hundred(total, x + 1)\n    }   \n    \n=== finished(total) ===\n    \"The result is {total}!\" you announce.\n    Gauss stares at you in horror.\n    -> END\n`}</code></pre>\n    <p>{`(In fact, this kind of definition is useful enough that `}<strong parentName=\"p\">{`ink`}</strong>{` provides a special kind of knot, called, imaginatively enough, a `}<inlineCode parentName=\"p\">{`function`}</inlineCode>{`, which comes with certain restrictions and can return a value. See the section below.)`}</p>\n    <h4>{`Advanced: sending divert targets as parameters`}</h4>\n    <p>{`Knot/stitch addresses are a type of value, indicated by a `}<inlineCode parentName=\"p\">{`->`}</inlineCode>{` character, and can be stored and passed around. The following is therefore legal, and often useful:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`=== sleeping_in_hut ===\n    You lie down and close your eyes.\n    -> generic_sleep (-> waking_in_the_hut)\n\n===  generic_sleep (-> waking)\n    You sleep perchance to dream etc. etc.\n    -> waking\n\n=== waking_in_the_hut\n    You get back to your feet, ready to continue your journey.\n    \n`}</code></pre>\n    <p>{`...but note the `}<inlineCode parentName=\"p\">{`->`}</inlineCode>{` in the `}<inlineCode parentName=\"p\">{`generic_sleep`}</inlineCode>{` definition: that's the one case in `}<strong parentName=\"p\">{`ink`}</strong>{` where a parameter needs to be typed: because it's too easy to otherwise accidentally do the following:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`=== sleeping_in_hut ===\n    You lie down and close your eyes.\n    -> generic_sleep (waking_in_the_hut)\n`}</code></pre>\n    <p>{`... which sends the read count of `}<inlineCode parentName=\"p\">{`waking_in_the_hut`}</inlineCode>{` into the sleeping knot, and then attempts to divert to it.`}</p>\n    <h2>{`5) Functions`}</h2>\n    <p>{`The use of parameters on knots means they are almost functions in the usual sense, but they lack one key concept - that of the call stack, and the use of return values. `}</p>\n    <p><strong parentName=\"p\">{`ink`}</strong>{` includes functions: they are knots, with the following limitations and features:`}</p>\n    <p>{`A function:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`cannot contain stitches`}</li>\n      <li parentName=\"ul\">{`cannot use diverts or offer choices`}</li>\n      <li parentName=\"ul\">{`can call other functions`}</li>\n      <li parentName=\"ul\">{`can include printed content `}</li>\n      <li parentName=\"ul\">{`can return a value of any type`}</li>\n      <li parentName=\"ul\">{`can recurse safely`}</li>\n    </ul>\n    <p>{`(Some of these may seem quite limiting, but for more story-oriented call-stack-style features, see the section of Tunnels.)`}</p>\n    <p>{`Return values are provided via the `}<inlineCode parentName=\"p\">{`~ return`}</inlineCode>{` statement. `}</p>\n    <h3>{`Defining and calling functions`}</h3>\n    <p>{`To define a function, simply declare a knot to be one:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`=== function say_yes_to_everything ===\n    ~ return true\n\n=== function lerp(a, b, k) ===\n    ~ return ((b - a) * k) + a\n`}</code></pre>\n    <p>{`Functions are called by name, and with brackets, even if they have no parameters:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`~ x = lerp(2, 8, 0.3)\n\n*   {say_yes_to_everything()} 'Yes.' \n`}</code></pre>\n    <p>{`As in any other language, a function, once done, returns the flow to wherever it was called from - and despite not being allowed to divert the flow, functions can still call other functions.`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`=== function say_no_to_nothing === \n    ~ return say_yes_to_everything()\n`}</code></pre>\n    <h3>{`Functions don't have to return anything`}</h3>\n    <p>{`A function does not need to have a return value, and can simply do something that is worth packaging up:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`=== function harm(x) ===\n    { stamina < x:\n        ~ stamina = 0\n    - else:\n        ~ stamina = stamina - x\n    }\n`}</code></pre>\n    <p>{`...though remember a function cannot divert, so while the above prevents a negative Stamina value, it won't kill a player who hits zero.`}</p>\n    <h3>{`Functions can be called inline`}</h3>\n    <p>{`Functions can be called on `}<inlineCode parentName=\"p\">{`~`}</inlineCode>{` content lines, but can also be called during a piece of content. In this context, the return value, if there is one, is printed (as well as anything else the function wants to print.) If there is no return value, nothing is printed.`}</p>\n    <p>{`Content is, by default, 'glued in', so the following:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`Monsieur Fogg was looking {describe_health(health)}.\n\n=== function describe_health(x) ===\n{ \n- x == 100:\n    ~ return \"spritely\"\n- x > 75:\n    ~ return \"chipper\"\n- x > 45:\n    ~ return \"somewhat flagging\"\n- else:\n    ~ return \"despondent\"\n}\n`}</code></pre>\n    <p>{`produces:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`Monsieur Fogg was looking despondent.\n`}</code></pre>\n    <h4>{`Examples`}</h4>\n    <p>{`For instance, you might include:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`=== function max(a,b) ===\n    { a < b:\n        ~ return b\n    - else:\n        ~ return a\n    }\n\n=== function exp(x, e) ===\n    // returns x to the power e where e is an integer\n    { e <= 0:\n        ~ return 1\n    - else: \n        ~ return x * exp(x, e - 1)\n    }\n`}</code></pre>\n    <p>{`Then:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`The maximum of 2^5 and 3^3 is {max(exp(2,5), exp(3,3))}. \n    \n`}</code></pre>\n    <p>{`produces:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`The maximum of 2^5 and 3^3 is 32.\n`}</code></pre>\n    <h4>{`Example: turning numbers into words`}</h4>\n    <p>{`The following example is long, but appears in pretty much every inkle game to date. (Recall that a hyphenated line inside multiline curly braces indicates either \"a condition to test\" or, if the curly brace began with a variable, \"a value to compare against\".)`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`=== function print_num(x) ===\n{ \n    - x >= 1000:\n        {print_num(x / 1000)} thousand { x mod 1000 > 0:{print_num(x mod 1000)}}\n    - x >= 100:\n        {print_num(x / 100)} hundred { x mod 100 > 0:and {print_num(x mod 100)}}\n    - x == 0:\n        zero\n    - else:\n        { x >= 20:\n            { x / 10:\n                - 2: twenty\n                - 3: thirty\n                - 4: forty\n                - 5: fifty\n                - 6: sixty\n                - 7: seventy\n                - 8: eighty\n                - 9: ninety\n            }\n            { x mod 10 > 0:<>-<>}\n        }\n        { x < 10 || x > 20:\n            { x mod 10:\n                - 1: one\n                - 2: two\n                - 3: three\n                - 4: four        \n                - 5: five\n                - 6: six\n                - 7: seven\n                - 8: eight\n                - 9: nine\n            }\n        - else:     \n            { x:\n                - 10: ten\n                - 11: eleven       \n                - 12: twelve\n                - 13: thirteen\n                - 14: fourteen\n                - 15: fifteen\n                - 16: sixteen      \n                - 17: seventeen\n                - 18: eighteen\n                - 19: nineteen\n            }\n        }\n}\n`}</code></pre>\n    <p>{`which enables us to write things like:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`~ price = 15\n\nI pulled out {print_num(price)} coins from my pocket and slowly counted them. \n\"Oh, never mind,\" the trader replied. \"I'll take half.\" And she took {print_num(price / 2)}, and pushed the rest back over to me.\n`}</code></pre>\n    <h3>{`Parameters can be passed by reference`}</h3>\n    <p>{`Function parameters can also be passed 'by reference', meaning that the function can actually alter the the variable being passed in, instead of creating a temporary variable with that value. `}</p>\n    <p>{`For instance, most `}<strong parentName=\"p\">{`inkle`}</strong>{` stories include the following:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`=== function alter(ref x, k) ===\n    ~ x = x + k\n`}</code></pre>\n    <p>{`Lines such as:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`~ gold = gold + 7\n~ health = health - 4\n`}</code></pre>\n    <p>{`then become:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`~ alter(gold, 7)\n~ alter(health, -4)\n`}</code></pre>\n    <p>{`which are slightly easier to read, and (more usefully) can be done inline for maximum compactness.`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`*   I ate a biscuit[] and felt refreshed. {alter(health, 2)}\n*   I gave a biscuit to Monsieur Fogg[] and he wolfed it down most undecorously. {alter(foggs_health, 1)}\n-   <> Then we continued on our way.\n`}</code></pre>\n    <p>{`Wrapping up simple operations in function can also provide a simple place to put debugging information, if required.`}</p>\n    <h2>{`6) Constants`}</h2>\n    <h3>{`Global Constants`}</h3>\n    <p>{`Interactive stories often rely on state machines, tracking what stage some higher level process has reached. There are lots of ways to do this, but the most conveninent is to use constants.`}</p>\n    <p>{`Sometimes, it's convenient to define constants to be strings, so you can print them out, for gameplay or debugging purposes.`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`CONST HASTINGS = \"Hastings\"\nCONST POIROT = \"Poirot\"\nCONST JAPP = \"Japp\"\n\nVAR current_chief_suspect = HASTINGS\n\n=== review_evidence ===\n    { found_japps_bloodied_glove:\n        ~ current_chief_suspect = POIROT\n    }\n    Current Suspect: {current_chief_suspect}\n`}</code></pre>\n    <p>{`Sometimes giving them values is useful:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`CONST PI = 3.14\nCONST VALUE_OF_TEN_POUND_NOTE = 10\n`}</code></pre>\n    <p>{`And sometimes the numbers are useful in other ways:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`CONST LOBBY = 1\nCONST STAIRCASE = 2\nCONST HALLWAY = 3\n\nCONST HELD_BY_AGENT = -1\n\nVAR secret_agent_location = LOBBY\nVAR suitcase_location = HALLWAY\n\n=== report_progress ===\n{  secret_agent_location = suitcase_location:\n    The secret agent grabs the suitcase!\n    ~ suitcase_location = HELD_BY_AGENT  \n    \n-  secret_agent_location < suitcase_location:\n    The secret agent moves forward.\n    ~ secret_agent_location++\n}\n`}</code></pre>\n    <p>{`Constants are simply a way to allow you to give story states easy-to-understand names.  `}</p>\n    <h2>{`7) Advanced: Game-side logic`}</h2>\n    <p>{`There are two core ways to provide game hooks in the `}<strong parentName=\"p\">{`ink`}</strong>{` engine. External function declarations in ink allow you to directly call C# functions in the game, and variable observers are callbacks that are fired in the game when ink variables are modified. Both of these are described in `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/inkle/ink/blob/master/Documentation/RunningYourInk.md\"\n      }}>{`Running your ink`}</a>{`.`}</p>\n    </MDXLayout>;\n}\n\nMDXContent.isMDXComponent = true;\n  ","/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\n\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1>{`Part Four: Advanced Flow Control`}</h1>\n    <h2>{`1) Tunnels`}</h2>\n    <p>{`The default structure for `}<strong parentName=\"p\">{`ink`}</strong>{` stories is a \"flat\" tree of choices, branching and joining back together, perhaps looping, but with the story always being \"at a certain place\". `}</p>\n    <p>{`But this flat structure makes certain things difficult: for example, imagine a game in which the following interaction can happen:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`=== crossing_the_date_line ===\n*   \"Monsieur!\"[] I declared with sudden horror. \"I have just realised. We have crossed the international date line!\"\n-   Monsieur Fogg barely lifted an eyebrow. \"I have adjusted for it.\"\n*   I mopped the sweat from my brow[]. A relief!\n*   I nodded, becalmed[]. Of course he had!\n*  I cursed, under my breath[]. Once again, I had been belittled!\n`}</code></pre>\n    <p>{`...but it can happen at several different places in the story. We don't want to have to write copies of the content for each different place, but when the content is finished it needs to know where to return to. We can do this using parameters:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`=== crossing_the_date_line(-> return_to) ===\n...\n-   -> return_to \n\n...\n\n=== outside_honolulu ===\nWe arrived at the large island of Honolulu.\n- (postscript) \n    -> crossing_the_date_line(-> done)\n- (done)\n    -> END \n\n...\n\n=== outside_pitcairn_island ===\nThe boat sailed along the water towards the tiny island.\n- (postscript) \n    -> crossing_the_date_line(-> done)\n- (done)\n    -> END \n`}</code></pre>\n    <p>{`Both of these locations now call and execute the same segment of storyflow, but once finished they return to where they need to go next. `}</p>\n    <p>{`But what if the section of story being called is more complex - what if it spreads across several knots? Using the above, we'd have to keep passing the 'return-to' parameter from knot to knot, to ensure we always knew where to return.`}</p>\n    <p>{`So instead, `}<strong parentName=\"p\">{`ink`}</strong>{` integrates this into the language with a new kind of divert, that functions rather like a subroutine, and is called a 'tunnel'.`}</p>\n    <h3>{`Tunnels run sub-stories`}</h3>\n    <p>{`The tunnel syntax looks like a divert, with another divert on the end:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`-> crossing_the_date_line ->\n`}</code></pre>\n    <p>{`This means \"do the crossing_the_date_line story, then continue from here\". `}</p>\n    <p>{`Inside the tunnel itself, the syntax is simplified from the parameterised example: all we do is end the tunnel using the `}<inlineCode parentName=\"p\">{`->->`}</inlineCode>{` statement which means, essentially, \"go on\".`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`=== crossing_the_date_line === \n// this is a tunnel!\n...\n-   ->->\n`}</code></pre>\n    <p>{`Note that tunnel knots aren't declared as such, so the compiler won't check that tunnels really do end in `}<inlineCode parentName=\"p\">{`->->`}</inlineCode>{` statements, except at run-time. So you will need to write carefully to ensure that all the flows into a tunnel really do come out again.`}</p>\n    <p>{`Tunnels can also be chained together, or finish on a normal divert:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`... \n// this runs the tunnel, then diverts to 'done'\n-> crossing_the_date_line -> done\n...\n\n... \n//this runs one tunnel, then another, then diverts to 'done'\n-> crossing_the_date_line -> check_foggs_health -> done\n...\n`}</code></pre>\n    <p>{`Tunnels can be nested, so the following is valid:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`=== plains ===\n= night_time \n    The dark grass is soft under your feet.\n    +   [Sleep]\n        -> sleep_here -> wake_here -> day_time\n= day_time \n    It is time to move on.\n    \n=== wake_here ===\n    You wake as the sun rises.\n    +   [Eat something]\n        -> eat_something ->\n    +   [Make a move]\n    -   ->->\n\n=== sleep_here ===\n    You lie down and try to close your eyes.\n    -> monster_attacks -> \n    Then it is time to sleep.\n    -> dream ->\n    ->->\n    \n`}</code></pre>\n    <p>{`... and so on.`}</p>\n    <h4>{`Advanced: Tunnels use a call-stack`}</h4>\n    <p>{`Tunnels are on a call-stack, so can safely recurse.`}</p>\n    <h2>{`2) Threads`}</h2>\n    <p>{`So far, everything in ink has been entirely linear, despite all the branching and diverting. But it's actually possible for a writer to 'fork' a story into different sub-sections, to cover more possible player actions. `}</p>\n    <p>{`We call this 'threading', though it's not really threading in the sense that computer scientists mean it: it's more like stitching in new content from various places.`}</p>\n    <p>{`Note that this is definitely an advanced feature: the engineering stories becomes somewhat more complex once threads are involved!`}</p>\n    <h3>{`Threads join multiple sections together`}</h3>\n    <p>{`Threads allow you to compose sections of content from multiple sources in one go. For example:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`== thread_example ==\nI had a headache; threading is hard to get your head around.\n<- conversation\n<- walking\n\n\n== conversation ==\nIt was a tense moment for Monty and me.\n * \"What did you have for lunch today?\"[] I asked.\n    \"Spam and eggs,\" he replied.\n * \"Nice weather, we're having,\"[] I said.\n    \"I've seen better,\" he replied.\n - -> house\n\n== walking ==\nWe continued to walk down the dusty road.\n * [Continue walking]\n    -> house\n\n== house ==\nBefore long, we arrived at his house.\n-> END\n`}</code></pre>\n    <p>{`It allows multiple sections of story to combined together into a single section:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`I had a headache; threading is hard to get your head around.\nIt was a tense moment for Monty and me.\nWe continued to walk down the dusty road.\n1: \"What did you have for lunch today?\"\n2: \"Nice weather, we're having,\"\n3: Continue walking\n`}</code></pre>\n    <p>{`On encountering a thread statement such as `}<inlineCode parentName=\"p\">{`<- conversation`}</inlineCode>{`, the compiler will fork the story flow. The first fork considered will run the content at `}<inlineCode parentName=\"p\">{`conversation`}</inlineCode>{`, collecting up any options it finds. Once it has run out of flow here it'll then run the other fork. `}</p>\n    <p>{`All the content is collected and shown to the player. But when a choice is chosen, the engine will move to that fork of the story and collapse and discard the others.`}</p>\n    <p>{`Note that global variables are `}<em parentName=\"p\">{`not`}</em>{` forked, including the read counts of knots and stitches. `}</p>\n    <h3>{`Uses of threads`}</h3>\n    <p>{`In a normal story, threads might never be needed. `}</p>\n    <p>{`But for games with lots of independent moving parts, threads quickly become essential. Imagine a game in which characters move independently around a map: the main story hub for a room might look like the following:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`CONST HALLWAY = 1\nCONST OFFICE = 2\n\nVAR player_location = HALLWAY\nVAR generals_location = HALLWAY \nVAR doctors_location = OFFICE\n\n== run_player_location\n    { \n        - player_location == HALLWAY: -> hallway \n    }\n\n== hallway ==   \n    <- characters_present\n    *   [Drawers]   -> examine_drawers\n    *   [Wardrobe] -> examine_wardrobe\n    *  [Go to Office]   -> go_office\n    -   -> run_player_location  \n= examine_drawers \n    // etc... \n\n// Here's the thread, which mixes in dialogue for characters you share the room with at the moment.\n\n== characters_present(room)\n    { generals_location == player_location:\n        <- general_conversation\n    }\n    { doctors_location == room:\n        <- doctor_conversation\n    }\n    \n== general_conversation \n    *   [Ask the General about the bloodied knife]\n        \"It's a bad business, I can tell you.\"\n    -   -> run_player_location\n\n== doctor_conversation \n    *   [Ask the Doctor about the bloodied knife]\n        \"There's nothing strange about blood, is there?\"\n    -   -> run_player_location \n    \n`}</code></pre>\n    <p>{`Note in particular, that we need an explicit way to return the player who has gone down a side-thread to return to the main flow. In most cases, threads will either need a parameter telling them where to return to, or they'll need to end the current story section.`}</p>\n    <h3>{`When does a side-thread end?`}</h3>\n    <p>{`Side-threads end when they run out of flow to process: and note, they collect up options to display later (unlike tunnels, which collect options, display them and follow them until they hit an explicit return, possibly several moves later).`}</p>\n    <p>{`Sometimes a thread has no content to offer - perhaps there is no conversation to have with a character after all, or perhaps we have simply not written it yet. In that case, we must mark the end of the thread explicitly.`}</p>\n    <p>{`If we didn't, the end of content might be a story-bug or a hanging story thread, and we want the compiler to tell us about those. `}</p>\n    <h3>{`Using `}<inlineCode parentName=\"h3\">{`-> DONE`}</inlineCode></h3>\n    <p>{`In cases where we want to mark the end of a thread, we use `}<inlineCode parentName=\"p\">{`-> DONE`}</inlineCode>{`: meaning \"the flow intentionally ends here\". If we don't, we might end up with a warning message - we can still play the game, but it's a reminder that we have unfinished business. `}</p>\n    <p>{`The example at the start of this section will generate a warning; it can be fixed as follows:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`== thread_example ==\nI had a headache; threading is hard to get your head around.\n<- conversation\n<- walking\n-> DONE \n`}</code></pre>\n    <p>{`The extra DONE tells ink that the flow here has ended and it should rely on the threads for the next part of the story. `}</p>\n    <p>{`Note that we don't need a `}<inlineCode parentName=\"p\">{`-> DONE`}</inlineCode>{` if the flow ends with options that fail their conditions. The engine treats this as a valid, intentional, end of flow state.`}</p>\n    <p><strong parentName=\"p\">{`You do not need a `}<inlineCode parentName=\"strong\">{`-> DONE`}</inlineCode>{` after an option has been chosen`}</strong>{`. Once an option is chosen, a thread is no longer a thread - it is simply the normal story flow once more.`}</p>\n    <p>{`Using `}<inlineCode parentName=\"p\">{`-> END`}</inlineCode>{` in this case will not end the thread, but the whole story flow. (And this is the real reason for having two different ways to end flow.)`}</p>\n    <h4>{`Example: adding the same choice to several places`}</h4>\n    <p>{`Threads can be used to add the same choice into lots of different places. When using them this way, it's normal to pass a divert as a parameter, to tell the story where to go after the choice is done. `}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`=== outside_the_house\nThe front step. The house smells. Of murder. And lavender.\n- (top)\n    <- review_case_notes(-> top) \n    *   [Go through the front door] \n        I stepped inside the house.\n        -> the_hallway\n    *   [Sniff the air]\n        I hate lavender. It makes me think of soap, and soap makes me think about my marriage. \n        -> top\n\n=== the_hallway\nThe hallway. Front door open to the street. Little bureau.\n- (top)\n    <- review_case_notes(-> top) \n    *   [Go through the front door] \n        I stepped out into the cool sunshine. \n        -> outside_the_house\n    *   [Open the bureau] \n        Keys. More keys. Even more keys. How many locks do these people need?\n        -> top\n\n=== review_case_notes(-> go_back_to) \n+   {not done || TURNS_SINCE(-> done) > 10} \n    [Review my case notes] \n    // the conditional ensures you don't get the option to check repeatedly\n    {I|Once again, I} flicked through the notes I'd made so far. Still not obvious suspects.\n-   (done) -> go_back_to\n`}</code></pre>\n    <p>{`Note this is different than a tunnel, which runs the same block of content but doesn't give a player a choice. So a layout like:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`<- childhood_memories(-> next) \n*   [Look out of the window] \n    I daydreamed as we rolled along... \n - (next) Then the whistle blew...\n`}</code></pre>\n    <p>{`might do exactly the same thing as:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`*   [Remember my childhood] \n    -> think_back -> \n*   [Look out of the window] \n    I daydreamed as we rolled along...\n-   (next) Then the whistle blew...     \n`}</code></pre>\n    <p>{`but as soon as the option being threaded in includes multiple choices, or conditional logic on choices (or any text content, of course!), the thread version becomes more practical. `}</p>\n    <h4>{`Example: organisation of wide choice points`}</h4>\n    <p>{`A game which uses ink as a script rather than a literal output might often generate very large numbers of parallel choices, intended to be filtered by the player via some other in-game interaction - such as walking around an environment. Threads can be useful in these cases simply to divide up choices.`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`=== the_kitchen \n- (top)\n    <- drawers(-> top)\n    <- cupboards(-> top) \n    <- room_exits\n= drawers (-> goback)\n    // choices about the drawers...\n    ...\n= cupboards(-> goback) \n    // choices about cupboards\n    ...\n= room_exits\n    // exits; doesn't need a \"return point\" as if you leave, you go elsewhere\n    ...\n`}</code></pre>\n    </MDXLayout>;\n}\n\nMDXContent.isMDXComponent = true;\n  ","/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\n\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1>{`Part Five: Advanced State Tracking`}</h1>\n    <p>{`Games with lots of interaction can get very complex, very quickly and the writer's job is often as much about maintaining continuity as it is about content. `}</p>\n    <p>{`This becomes particularly important if the game text is intended to model anything - whether it's a game of cards, the player's knowledge of the gameworld so far, or the state of the various light-switches in a house.`}</p>\n    <p><strong parentName=\"p\">{`ink`}</strong>{` does not provide a full world-modelling system in the manner of a classic parser IF authoring language - there are no \"objects\", no concepts of \"containment\" or being \"open\" or \"locked\". However, it does provide a simple yet powerful system for tracking state-changes in a very flexible way, to enable writers to approximate world models where necessary.`}</p>\n    <h4>{`Note: New feature alert!`}</h4>\n    <p>{`This feature is very new to the language. That means we haven't begun to discover all the ways it might be used - but we're pretty sure it's going to be useful! So if you think of a clever usage we'd love to know!`}</p>\n    <h2>{`1) Basic Lists`}</h2>\n    <p>{`The basic unit of state-tracking is a list of states, defined using the `}<inlineCode parentName=\"p\">{`LIST`}</inlineCode>{` keyword. Note that a list is really nothing like a C# list (which is an array). `}</p>\n    <p>{`For instance, we might have:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`LIST kettleState = cold, boiling, recently_boiled\n`}</code></pre>\n    <p>{`This line defines two things: firstly three new values - `}<inlineCode parentName=\"p\">{`cold`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`boiling`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`recently_boiled`}</inlineCode>{` - and secondly, a variable, called `}<inlineCode parentName=\"p\">{`kettleState`}</inlineCode>{`, to hold these states. `}</p>\n    <p>{`We can tell the list what value to take: `}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`~ kettleState = cold\n`}</code></pre>\n    <p>{`We can change the value:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`*   [Turn on kettle] \n    The kettle begins to bubble and boil.\n    ~ kettleState = boiling\n`}</code></pre>\n    <p>{`We can query the value: `}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`*   [Touch the kettle] \n    { kettleState == cold:\n        The kettle is cool to the touch. \n    - else:\n        The outside of the kettle is very warm! \n    }\n`}</code></pre>\n    <p>{`For convenience, we can give a list a value when it's defined using a bracket: `}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`LIST kettleState = cold, (boiling), recently_boiled\n// at the start of the game, this kettle is switched on. Edgy, huh?\n`}</code></pre>\n    <p>{`...and if the notation for that looks a bit redundant, there's a reason for that coming up in a few subsections time. `}</p>\n    <h2>{`2) Reusing Lists`}</h2>\n    <p>{`The above example is fine for the kettle, but what if we have a pot on the stove as well? We can then define a list of states, but put them into variables - and as many variables as we want.`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`LIST daysOfTheWeek = Monday, Tuesday, Wednesday, Thursday, Friday \nVAR today = Monday\nVAR tomorrow = Tuesday\n`}</code></pre>\n    <h3>{`States can be used repeatedly`}</h3>\n    <p>{`This allows us to use the same state machine in multiple places.`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`LIST heatedWaterStates = cold, boiling, recently_boiled\nVAR kettleState = cold \nVAR potState = cold \n\n*   {kettleState == cold} [Turn on kettle] \n    The kettle begins to boil and bubble. \n    ~ kettleState = boiling\n*   {potState == cold} [Light stove] \n    The water in the pot begins to boil and bubble. \n    ~ potState = boiling\n    \n`}</code></pre>\n    <p>{`But what if we add a microwave as well? We might want start generalising our functionality a bit:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`LIST heatedWaterStates = cold, boiling, recently_boiled\nVAR kettleState = cold \nVAR potState = cold \nVAR microwaveState = cold\n\n=== function boilSomething(ref thingToBoil, nameOfThing) \n    The {nameOfThing} begins to heat up. \n    ~ thingToBoil = boiling \n\n=== do_cooking\n*   {kettleState == cold} [Turn on kettle] \n    {boilSomething(kettleState, \"kettle\")}\n*   {potState == cold} [Light stove] \n    {boilSomething(potState, \"pot\")}        *   {microwaveState == cold} [Turn on microwave] \n    {boilSomething(microwaveState, \"microwave\")}\n`}</code></pre>\n    <p>{`or even... `}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`LIST heatedWaterStates = cold, boiling, recently_boiled\nVAR kettleState = cold \nVAR potState = cold \nVAR microwaveState = cold\n\n=== cook_with(nameOfThing, ref thingToBoil) \n+   {thingToBoil == cold} [Turn on {nameOfThing}]\n    The {nameOfThing} begins to heat up. \n    ~ thingToBoil = boiling \n    -> do_cooking.done\n        \n=== do_cooking\n<- cook_with(\"kettle\", kettleState)\n<- cook_with(\"pot\", potState)\n<- cook_with(\"microwave\", microwaveState)\n- (done) \n        \n`}</code></pre>\n    <p>{`Note that the \"heatedWaterStates\" list is still available as well, and can still be tested, and take a value.`}</p>\n    <h4>{`List values can share names`}</h4>\n    <p>{`Reusing lists brings with it ambiguity. If we have:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`LIST colours = red, green, blue, purple \nLIST moods = mad, happy, blue\n\nVAR status = blue\n`}</code></pre>\n    <p>{`... how can the compiler know which blue you meant? `}</p>\n    <p>{`We resolve these using a `}<inlineCode parentName=\"p\">{`.`}</inlineCode>{` syntax similar to that used for knots and stitches. `}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`VAR status = colours.blue \n`}</code></pre>\n    <p>{`...and the compiler will issue an error until you specify. `}</p>\n    <p>{`Note the \"family name\" of the state, and the variable containing a state, are totally separate. So `}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`{ statesOfGrace == statesOfGrace.fallen:\n    // is the current state \"fallen\"\n}\n`}</code></pre>\n    <p>{`... is correct.`}</p>\n    <h4>{`Advanced: a LIST is actually a variable`}</h4>\n    <p>{`One surprising feature is the statement `}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`LIST statesOfGrace = ambiguous, saintly, fallen \n`}</code></pre>\n    <p>{`actually does two things simultaneously: it creates three values, `}<inlineCode parentName=\"p\">{`ambiguous`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`saintly`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`fallen`}</inlineCode>{`, and gives them the name-parent `}<inlineCode parentName=\"p\">{`statesOfGrace`}</inlineCode>{` if needed; and it creates a variable called `}<inlineCode parentName=\"p\">{`statesOfGrace`}</inlineCode>{`. `}</p>\n    <p>{`And that variable can be used like a normal variable. So the following is valid, if horribly confusing and a bad idea:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`LIST statesOfGrace = ambiguous, saintly, fallen\n\n~ statesOfGrace = 3.1415 // set the variable to a number not a list value\n`}</code></pre>\n    <p>{`...and it wouldn't preclude the following from being fine:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`~ temp anotherStateOfGrace = statesOfGrace.saintly\n`}</code></pre>\n    <h2>{`3) List Values`}</h2>\n    <p>{`When a list is defined, the values are listed in an order, and that order is considered to be significant. In fact, we can treat these values as if they `}<em parentName=\"p\">{`were`}</em>{` numbers. (That is to say, they are enums.)`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`LIST volumeLevel = off, quiet, medium, loud, deafening\nVAR lecturersVolume = quiet\nVAR murmurersVolume = quiet\n\n{ lecturersVolume < deafening:\n    ~ lecturersVolume++\n    \n    { lecturersVolume > murmurersVolume:\n        ~ murmurersVolume++\n        The murmuring gets louder.\n    }\n}\n`}</code></pre>\n    <p>{`The values themselves can be printed using the usual `}<inlineCode parentName=\"p\">{`{...}`}</inlineCode>{` syntax, but this will print their name. `}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`The lecturer's voice becomes {lecturersVolume}.\n`}</code></pre>\n    <h3>{`Converting values to numbers`}</h3>\n    <p>{`The numerical value, if needed, can be got explicitly using the LIST_VALUE function. Note the first value in a list has the value 1, and not the value 0. `}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`The lecturer has {LIST_VALUE(deafening) - LIST_VALUE(lecturersVolume)} notches still available to him.\n`}</code></pre>\n    <h3>{`Converting numbers to values`}</h3>\n    <p>{`You can go the other way by using the list's name as a function:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`LIST Numbers = one, two, three \nVAR score = one\n~ score = Numbers(2) // score will be \"two\"\n`}</code></pre>\n    <h3>{`Advanced: defining your own numerical values`}</h3>\n    <p>{`By default, the values in a list start at 1 and go up by one each time, but you can specify your own values if you need to. `}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`LIST primeNumbers = two = 2, three = 3, five = 5\n`}</code></pre>\n    <p>{`If you specify a value, but not the next value, ink will assume an increment of 1. So the following is the same:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`LIST primeNumbers = two = 2, three, five = 5    \n`}</code></pre>\n    <h2>{`4) Multivalued Lists`}</h2>\n    <p>{`The following examples have all included one deliberate untruth, which we'll now remove. Lists - and variables containing list values - do not have to contain only one value. `}</p>\n    <h3>{`Lists are boolean sets`}</h3>\n    <p>{`A list variable is not a variable containing a number. Rather, a list is like the in/out nameboard in an accommodation block. It contains a list of names, each of which has a room-number associated with it, and a slider to say \"in\" or \"out\". `}</p>\n    <p>{`Maybe no one is in:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`LIST DoctorsInSurgery = Adams, Bernard, Cartwright, Denver, Eamonn \n`}</code></pre>\n    <p>{`Maybe everyone is:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`LIST DoctorsInSurgery = (Adams), (Bernard), (Cartwright), (Denver), (Eamonn)\n`}</code></pre>\n    <p>{`Or maybe some are and some aren't:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`LIST DoctorsInSurgery = (Adams), Bernard, (Cartwright), Denver, Eamonn \n`}</code></pre>\n    <p>{`Names in brackets are included in the initial state of the list. `}</p>\n    <p>{`Note that if you're defining your own values, you can place the brackets around the whole term or just the name:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`LIST primeNumbers = (two = 2), (three) = 3, (five = 5)\n`}</code></pre>\n    <h4>{`Assiging multiple values`}</h4>\n    <p>{`We can assign all the values of the list at once as follows:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`~ DoctorsInSurgery = (Adams, Bernard)\n~ DoctorsInSurgery = (Adams, Bernard, Eamonn)\n`}</code></pre>\n    <p>{`We can assign the empty list to clear a list out:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`~ DoctorsInSurgery = ()\n`}</code></pre>\n    <h4>{`Adding and removing entries`}</h4>\n    <p>{`List entries can be added and removed, singly or collectively. `}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`~ DoctorsInSurgery = DoctorsInSurgery + Adams   ~ DoctorsInSurgery += Adams  // this is the same as the above\n~ DoctorsInSurgery -= Eamonn \n~ DoctorsInSurgery += (Eamonn, Denver) \n~ DoctorsInSurgery -= (Adams, Eamonn, Denver)\n`}</code></pre>\n    <p>{`Trying to add an entry that's already in the list does nothing. Trying to remove an entry that's not there also does nothing. Neither produces an error, and a list can never contain duplicate entries. `}</p>\n    <h3>{`Basic Queries`}</h3>\n    <p>{`We have a few basic ways of getting information about what's in a list:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`LIST DoctorsInSurgery = (Adams), Bernard, (Cartwright), Denver, Eamonn \n\n{LIST_COUNT(DoctorsInSurgery)}  //  \"2\"\n{LIST_MIN(DoctorsInSurgery)}        //  \"Adams\"\n{LIST_MAX(DoctorsInSurgery)}        //  \"Cartwright\"\n`}</code></pre>\n    <h4>{`Testing for emptiness`}</h4>\n    <p>{`Like most values in ink, a list can be tested \"as it is\", and will return true, unless it's empty. `}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`{ DoctorsInSurgery: The surgery is open today. | Everyone has gone home. }\n \n`}</code></pre>\n    <h4>{`Testing for exact equality`}</h4>\n    <p>{`Testing multi-valued lists is slightly more complex than single-valued ones. Equality (`}<inlineCode parentName=\"p\">{`==`}</inlineCode>{`) now means 'set equality' - that is, all entries are identical. `}</p>\n    <p>{`So one might say:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`{ DoctorsInSurgery == (Adams, Bernard):\n    Dr Adams and Dr Bernard are having a loud argument in one corner.\n}\n`}</code></pre>\n    <p>{`If Dr Eamonn is in as well, the two won't argue, as the lists being compared won't be equal - DoctorsInSurgery will have an Eamonn that the list (Adams, Bernard) doesn't have.`}</p>\n    <p>{`Not equals works as expected:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`{ DoctorsInSurgery != (Adams, Bernard):\n    At least Adams and Bernard aren't arguing. \n}\n`}</code></pre>\n    <h4>{`Testing for containment`}</h4>\n    <p>{`What if we just want to simply ask if Adams and Bernard are present? For that we use a new operator, `}<inlineCode parentName=\"p\">{`has`}</inlineCode>{`, otherwise known as `}<inlineCode parentName=\"p\">{`?`}</inlineCode>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`{ DoctorsInSurgery ? (Adams, Bernard):\n    Dr Adams and Dr Bernard are having a hushed argument in one corner.\n}\n`}</code></pre>\n    <p>{`And `}<inlineCode parentName=\"p\">{`?`}</inlineCode>{` can apply to single values too: `}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`{ DoctorsInSurgery has Eamonn:\n    Dr Eamonn is polishing his glasses.\n}\n`}</code></pre>\n    <p>{`We can also negate it, with `}<inlineCode parentName=\"p\">{`hasnt`}</inlineCode>{` or `}<inlineCode parentName=\"p\">{`!?`}</inlineCode>{` (not `}<inlineCode parentName=\"p\">{`?`}</inlineCode>{`). Note this starts to get a little complicated as`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`DoctorsInSurgery !? (Adams, Bernard)\n`}</code></pre>\n    <p>{`does not mean neither Adams nor Bernard is present, only that they are not `}<em parentName=\"p\">{`both`}</em>{` present (and arguing).`}</p>\n    <h4>{`Example: basic knowledge tracking`}</h4>\n    <p>{`The simplest use of a multi-valued list is for tracking \"game flags\" tidily.`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`LIST Facts = (Fogg_is_fairly_odd),  first_name_phileas, (Fogg_is_English)\n\n{Facts ? Fogg_is_fairly_odd:I smiled politely.|I frowned. Was he a lunatic?} \n'{Facts ? first_name_phileas:Phileas|Monsieur}, really!' I cried. \n`}</code></pre>\n    <p>{`In particular, it allows us to test for multiple game flags in a single line.\t`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`{ Facts ? (Fogg_is_English, Fogg_is_fairly_odd):  \n    <> 'I know Englishmen are strange, but this is *incredible*!' \n}\n`}</code></pre>\n    <h4>{`Example: a doctor's surgery`}</h4>\n    <p>{`We're overdue a fuller example, so here's one.`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`LIST DoctorsInSurgery = (Adams), Bernard, Cartwright, (Denver), Eamonn \n\n-> waiting_room\n\n=== function whos_in_today()\n    In the surgery today are {DoctorsInSurgery}.\n    \n=== function doctorEnters(who) \n    { DoctorsInSurgery !? who:\n        ~ DoctorsInSurgery += who\n        Dr {who} arrives in a fluster.\n    }\n\n=== function doctorLeaves(who) \n    { DoctorsInSurgery ? who:\n        ~ DoctorsInSurgery -= who\n        Dr {who} leaves for lunch.\n    }\n\n=== waiting_room\n    {whos_in_today()}\n    *   [Time passes...] \n        {doctorLeaves(Adams)} {doctorEnters(Cartwright)} {doctorEnters(Eamonn)}\n        {whos_in_today()}\n`}</code></pre>\n    <p>{`This produces:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`In the surgery today are Adams, Denver.\n\n> Time passes...\n\nDr Adams leaves for lunch. Dr Cartwright arrives in a fluster. Dr Eamonn arrives in a fluster.\n\nIn the surgery today are Cartwright, Denver, Eamonn.\n \n`}</code></pre>\n    <h4>{`Advanced: nicer list printing`}</h4>\n    <p>{`The basic list print is not especially attractive for use in-game. The following is better:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`=== function listWithCommas(list, if_empty) \n    {LIST_COUNT(list): \n    - 2: \n            {LIST_MIN(list)} and {listWithCommas(list - LIST_MIN(list), if_empty)}\n    - 1: \n            {list}\n    - 0: \n            {if_empty}          \n    - else: \n            {LIST_MIN(list)}, {listWithCommas(list - LIST_MIN(list), if_empty)} \n    }\n\nLIST favouriteDinosaurs = (stegosaurs), brachiosaur, (anklyosaurus), (pleiosaur)\n\nMy favourite dinosaurs are {listWithCommas(favouriteDinosaurs, \"all extinct\")}.\n`}</code></pre>\n    <p>{`It's probably also useful to have an is/are function to hand:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`=== function isAre(list)\n    {LIST_COUNT(list) == 1:is|are}\n    \nMy favourite dinosaurs {isAre(favouriteDinosaurs)} {listWithCommas(favouriteDinosaurs, \"all extinct\")}.\n`}</code></pre>\n    <p>{`And to be pendantic:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`My favourite dinosaur{LIST_COUNT(favouriteDinosaurs) != 1:s} {isAre(favouriteDinosaurs)} {listWithCommas(favouriteDinosaurs, \"all extinct\")}.\n`}</code></pre>\n    <h4>{`Lists don't need to have multiple entries`}</h4>\n    <p>{`Lists don't `}<em parentName=\"p\">{`have`}</em>{` to contain multiple values. If you want to use a list as a state-machine, the examples above will all work - set values using `}<inlineCode parentName=\"p\">{`=`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`++`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`--`}</inlineCode>{`; test them using `}<inlineCode parentName=\"p\">{`==`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`<`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`<=`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`>`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`>=`}</inlineCode>{`. These will all work as expected. `}</p>\n    <h3>{`The \"full\" list`}</h3>\n    <p>{`Note that `}<inlineCode parentName=\"p\">{`LIST_COUNT`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`LIST_MIN`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`LIST_MAX`}</inlineCode>{` are refering to who's in/out of the list, not the full set of `}<em parentName=\"p\">{`possible`}</em>{` doctors. We can access that using `}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`LIST_ALL(element of list) \n`}</code></pre>\n    <p>{`or `}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`LIST_ALL(list containing elements of a list)\n\n{LIST_ALL(DoctorsInSurgery)} // Adams, Bernard, Cartwright, Denver, Eamonn \n{LIST_COUNT(LIST_ALL(DoctorsInSurgery))} // \"5\"\n{LIST_MIN(LIST_ALL(Eamonn))}                // \"Adams\"\n`}</code></pre>\n    <p>{`Note that printing a list using `}<inlineCode parentName=\"p\">{`{...}`}</inlineCode>{` produces a bare-bones representation of the list; the values as words, delimited by commas.`}</p>\n    <h4>{`Advanced: \"refreshing\" a list's type`}</h4>\n    <p>{`If you really need to, you can make an empty list that knows what type of list it is. `}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`LIST ValueList = first_value, second_value, third_value\nVAR myList = ()\n\n~ myList = ValueList()\n`}</code></pre>\n    <p>{`You'll then be able to do:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`{ LIST_ALL(myList) }\n`}</code></pre>\n    <h4>{`Advanced: a portion of the \"full\" list`}</h4>\n    <p>{`You can also retrieve just a \"slice\" of the full list, using the `}<inlineCode parentName=\"p\">{`LIST_RANGE`}</inlineCode>{` function.`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`LIST_RANGE(list_name, min_value, max_value) \n`}</code></pre>\n    <h3>{`Example: Tower of Hanoi`}</h3>\n    <p>{`To demonstrate a few of these ideas, here's a functional Tower of Hanoi example, written so no one else has to write it.`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`LIST Discs = one, two, three, four, five, six, seven\nVAR post1 = ()\nVAR post2 = ()\nVAR post3 = ()\n\n~ post1 = LIST_ALL(Discs)\n\n-> gameloop\n\n=== function can_move(from_list, to_list) ===\n    { \n    -   LIST_COUNT(from_list) == 0:\n        // no discs to move\n        ~ return false\n    -   LIST_COUNT(to_list) > 0 && LIST_MIN(from_list) > LIST_MIN(to_list): \n        // the moving disc is bigger than the smallest of the discs on the new tower \n        ~ return false\n    -   else:  \n         // nothing stands in your way!\n        ~ return true\n        \n    }\n\n=== function move_ring( ref from, ref to ) ===\n    ~ temp whichRingToMove = LIST_MIN(from) \n    ~ from -= whichRingToMove\n    ~ to += whichRingToMove\n\n== function getListForTower(towerNum) \n    { towerNum:\n        - 1:    ~ return post1\n        - 2:    ~ return post2 \n        - 3:    ~ return post3\n    }\n\n=== function name(postNum) \n    the {postToPlace(postNum)} temple\n    \n=== function Name(postNum) \n    The {postToPlace(postNum)} temple\n\n=== function postToPlace(postNum)\n    { postNum: \n        - 1: first\n        - 2: second\n        - 3: third\n    }\n\n=== function describe_pillar(listNum) ==\n    ~ temp list = getListForTower(listNum)\n    { \n    - LIST_COUNT(list) == 0:\n        {Name(listNum)} is empty. \n    - LIST_COUNT(list) == 1:\n        The {list} ring lies on {name(listNum)}. \n    - else:\n        On {name(listNum)}, are the discs numbered {list}. \n    }\n    \n\n=== gameloop \n    Staring down from the heavens you see your followers finishing construction of the last of the great temples, ready to begin the work.\n- (top) \n    +  (describe) {true || TURNS_SINCE(-> describe) >= 2 || !describe} [ Regard the temples]\n        You regard each of the temples in turn. On each is stacked the rings of stone. {describe_pillar(1)} {describe_pillar(2)} {describe_pillar(3)}\n    <- move_post(1, 2, post1, post2)   \n    <- move_post(2, 1, post2, post1)  \n    <- move_post(1, 3, post1, post3)  \n    <- move_post(3, 1, post3, post1)  \n    <- move_post(3, 2, post3, post2)  \n    <- move_post(2, 3, post2, post3)  \n    -> DONE\n    \n= move_post(from_post_num, to_post_num, ref from_post_list, ref to_post_list) \n    +   { can_move(from_post_list, to_post_list) }\n        [ Move a ring from {name(from_post_num)} to {name(to_post_num)} ]\n        { move_ring(from_post_list, to_post_list) }\n        { stopping:\n        -   The priests far below construct a great harness, and after many years of work, the great stone ring is lifted up into the air, and swung over to the next of the temples. \n            The ropes are slashed, and in the blink of an eye it falls once more.\n        -   Your next decree is met with a great feast and many sacrifices. After the funeary smoke has cleared, work to shift the great stone ring begins in earnest. A generation grows and falls, and the ring falls into its ordained place. \n        -   {cycle: \n            - Years pass as the ring is slowly moved. \n            - The priests below fight a war over what colour robes to wear, but while they fall and die, the work is still completed. \n            }\n        }\n    -> top\n`}</code></pre>\n    <h2>{`5) Advanced List Operations`}</h2>\n    <p>{`The above section covers basic comparisons. There are a few more powerful features as well, but - as anyone familiar with mathematical   sets will know - things begin to get a bit fiddly. So this section comes with an 'advanced' warning.`}</p>\n    <p>{`A lot of the features in this section won't be necessary for most games.`}</p>\n    <h3>{`Comparing lists`}</h3>\n    <p>{`We can compare lists less than exactly using `}<inlineCode parentName=\"p\">{`>`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`<`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`>=`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`<=`}</inlineCode>{`. Be warned! The definitions we use are not exactly standard fare. They are based on comparing the numerical value of the elements in the lists being tested.`}</p>\n    <h4>{`\"Distinctly bigger than\"`}</h4>\n    <p><inlineCode parentName=\"p\">{`LIST_A > LIST_B`}</inlineCode>{` means \"the smallest value in A is bigger than the largest values in B\": in other words, if put on a number line, the entirety of A is to the right of the entirety of B. `}<inlineCode parentName=\"p\">{`<`}</inlineCode>{` does the same in reverse. `}</p>\n    <h4>{`\"Definitely never smaller than\"`}</h4>\n    <p><inlineCode parentName=\"p\">{`LIST_A >= LIST_B`}</inlineCode>{` means - take a deep breath now - \"the smallest value in A is at least the smallest value in B, and the largest value in A is at least the largest value in B\". That is, if drawn on a number line, the entirety of A is either above B or overlaps with it, but B does not extend higher than A.`}</p>\n    <p>{`Note that `}<inlineCode parentName=\"p\">{`LIST_A > LIST_B`}</inlineCode>{` implies `}<inlineCode parentName=\"p\">{`LIST_A != LIST_B`}</inlineCode>{`, and `}<inlineCode parentName=\"p\">{`LIST_A >= LIST_B`}</inlineCode>{` allows `}<inlineCode parentName=\"p\">{`LIST_A == LIST_B`}</inlineCode>{` but precludes `}<inlineCode parentName=\"p\">{`LIST_A < LIST_B`}</inlineCode>{`, as you might hope. `}</p>\n    <h4>{`Health warning!`}</h4>\n    <p><inlineCode parentName=\"p\">{`LIST_A >= LIST_B`}</inlineCode>{` is `}<em parentName=\"p\">{`not`}</em>{` the same as `}<inlineCode parentName=\"p\">{`LIST_A > LIST_B or LIST_A == LIST_B`}</inlineCode>{`.`}</p>\n    <p>{`The moral is, don't use these unless you have a clear picture in your mind.`}</p>\n    <h3>{`Inverting lists`}</h3>\n    <p>{`A list can be \"inverted\", which is the equivalent of going through the accommodation in/out name-board and flipping every switch to the opposite of what it was before. `}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`LIST GuardsOnDuty = (Smith), (Jones), Carter, Braithwaite\n\n=== function changingOfTheGuard \n    ~ GuardsOnDuty = LIST_INVERT(GuardsOnDuty)\n`}</code></pre>\n    <p>{`Note that `}<inlineCode parentName=\"p\">{`LIST_INVERT`}</inlineCode>{` on an empty list will return a null value, if the game doesn't have enough context to know what invert. If you need to handle that case, it's safest to do it by hand:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`=== function changingOfTheGuard \n    {!GuardsOnDuty: // \"is GuardsOnDuty empty right now?\"\n        ~ GuardsOnDuty = LIST_ALL(Smith)\n    - else:\n        ~ GuardsOnDuty = LIST_INVERT(GuardsOnDuty)\n    }\n`}</code></pre>\n    <h4>{`Footnote`}</h4>\n    <p>{`The syntax for inversion was originally `}<inlineCode parentName=\"p\">{`~ list`}</inlineCode>{` but we changed it because otherwise the line `}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`~ list = ~ list \n`}</code></pre>\n    <p>{`was not only functional, but actually caused list to invert itself, which seemed excessively perverse. `}</p>\n    <h3>{`Intersecting lists`}</h3>\n    <p>{`The `}<inlineCode parentName=\"p\">{`has`}</inlineCode>{` or `}<inlineCode parentName=\"p\">{`?`}</inlineCode>{` operator is, somewhat more formally, the \"are you a subset of me\" operator, ⊇, which includes the sets being equal, but which doesn't include if the larger set doesn't entirely contain the smaller set. `}</p>\n    <p>{`To test for \"some overlap\" between lists, we use the overlap operator, `}<inlineCode parentName=\"p\">{`^`}</inlineCode>{`, to get the `}<em parentName=\"p\">{`intersection`}</em>{`. `}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`LIST CoreValues = strength, courage, compassion, greed, nepotism, self_belief, delusions_of_godhood\nVAR desiredValues = (strength, courage, compassion, self_belief )\nVAR actualValues =  ( greed, nepotism, self_belief, delusions_of_godhood )\n\n{desiredValues ^ actualValues} // prints \"self_belief\"  \n`}</code></pre>\n    <p>{`The result is a new list, so you can test it:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`{desiredValues ^ actualValues: The new president has at least one desirable quality.} \n\n{LIST_COUNT(desiredValues ^ actualValues) == 1: Correction, the new president has only one desirable quality. {desiredValues ^ actualValues == self_belief: It's the scary one.}}\n`}</code></pre>\n    <h2>{`6) Multi-list Lists`}</h2>\n    <p>{`So far, all of our examples have included one large simplification, again - that the values in a list variable have to all be from the same list family. But they don't.`}</p>\n    <p>{`This allows us to use lists - which have so far played the role of state-machines and flag-trackers - to also act as general properties, which is useful for world modelling. `}</p>\n    <p>{`This is our inception moment. The results are powerful, but also more like \"real code\" than anything that's come before. `}</p>\n    <h3>{`Lists to track objects`}</h3>\n    <p>{`For instance, we might define:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`LIST Characters = Alfred, Batman, Robin \nLIST Props = champagne_glass, newspaper \n\nVAR BallroomContents = (Alfred, Batman, newspaper) \nVAR HallwayContents = (Robin, champagne_glass) \n`}</code></pre>\n    <p>{`We could then describe the contents of any room by testing its state:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`=== function describe_room(roomState)\n    { roomState ? Alfred: Alfred is here, standing quietly in a corner. } { roomState ? Batman: Batman's presence dominates all. } { roomState ? Robin: Robin is all but forgotten. }\n    <> { roomState ? champagne_glass: A champagne glass lies discarded on the floor. } { roomState ? newspaper: On one table, a headline blares out WHO IS THE BATMAN? AND *WHO* IS HIS BARELY-REMEMBERED ASSISTANT? }\n    \n`}</code></pre>\n    <p>{`So then:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`{ describe_room(BallroomContents) } \n`}</code></pre>\n    <p>{`produces:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`Alfred is here, standing quietly in a corner. Batman's presence dominates all.\n\nOn one table, a headline blares out WHO IS THE BATMAN? AND *WHO* IS HIS BARELY-REMEMBERED ASSISTANT?\n`}</code></pre>\n    <p>{`While:\t`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`{ describe_room(HallwayContents) } \n`}</code></pre>\n    <p>{`gives:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`Robin is all but forgotten.\n\nA champagne glass lies discarded on the floor.\n`}</code></pre>\n    <p>{`And we could have options based on combinations of things: `}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`*   { currentRoomState ? (Batman, Alfred) } [Talk to Alfred and Batman] \n    'Say, do you two know each other?' \n    \n`}</code></pre>\n    <h3>{`Lists to track multiple states`}</h3>\n    <p>{`We can model devices with multiple states. Back to the kettle again...`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`LIST OnOff = on, off \nLIST HotCold = cold, warm, hot \n\nVAR kettleState = off, cold \n\n=== function turnOnKettle() ===\n{ kettleState ? hot:\n    You turn on the kettle, but it immediately flips off again. \n- else: \n    The water in the kettle begins to heat up.\n    ~ kettleState -= off\n    ~ kettleState += on \n    // note we avoid \"=\" as it'll remove all existing states\n}\n\n=== function can_make_tea() ===\n    ~ return kettleState ? (hot, off)\n`}</code></pre>\n    <p>{`These mixed states can make changing state a bit trickier, as the off/on above demonstrates, so the following helper function can be useful.`}</p>\n    <p>{` \t=== function changeStateTo(ref stateVariable, stateToReach)\n// remove all states of this type\n~ stateVariable -= LIST_ALL(stateToReach)\n// put back the state we want\n~ stateVariable += stateToReach`}</p>\n    <p>{` which enables code like:`}</p>\n    <p>{` \t~ changeState(kettleState, on)\n~ changeState(kettleState, warm)`}</p>\n    <h4>{`How does this affect queries?`}</h4>\n    <p>{`The queries given above mostly generalise nicely to multi-valued lists`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`LIST Letters = a,b,c \nLIST Numbers = one, two, three \n\nVAR mixedList = (a, three, c)\n\n{LIST_ALL(mixedList)}   // a, one, b, two, c, three\n{LIST_COUNT(mixedList)} // 3 \n{LIST_MIN(mixedList)}   // a\n{LIST_MAX(mixedList)}   // three or c, albeit unpredictably\n\n{mixedList ? (a,b) }        // false \n{mixedList ^ LIST_ALL(a)}   // a, c\n\n{ mixedList >= (one, a) }   // true \n{ mixedList < (three) }     // false \n\n{ LIST_INVERT(mixedList) }            // one, b, two    \n`}</code></pre>\n    <h2>{`7) Long example: crime scene`}</h2>\n    <p>{`Finally, here's a long example, demonstrating a lot of ideas from this section in action. You might want to try playing it before reading through to better understand the various moving parts. `}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`-> murder_scene \n\n//\n//  System: items can have various states \n//  Some are general, some specific to particular items\n//\n\nLIST OffOn = off, on\nLIST SeenUnseen = unseen, seen\n\nLIST GlassState = (none), steamed, steam_gone \nLIST BedState = (made_up), covers_shifted, covers_off, stain_visible\n\n//\n// System: inventory\n//\n\nLIST Inventory = (none), cane, knife\n\n=== function get(x) \n    ~ Inventory += x\n\n//\n// System: positioning things \n// Items can be put in and on places\n// \n\nLIST Supporters = on_desk, on_floor, on_bed, under_bed, held, with_joe\n\n=== function move_to_supporter(ref item_state, new_supporter) ===\n    ~ item_state -= LIST_ALL(Supporters)\n    ~ item_state += new_supporter\n\n//\n// System: Incremental knowledge. \n// Each list is a chains of facts. Each fact supercedes the fact before it. \n//\n\n\nLIST BedKnowledge = (none), neatly_made, crumpled_duvet, hastily_remade, body_on_bed, murdered_in_bed, murdered_while_asleep\nLIST KnifeKnowledge = (none), prints_on_knife, joe_seen_prints_on_knife,joe_wants_better_prints, joe_got_better_prints\nLIST WindowKnowledge = (none), steam_on_glass, fingerprints_on_glass, fingerprints_on_glass_match_knife\n\nVAR knowledgeState = ()\n\n=== function learn(x) ===\n    // learn this fact\n    ~ knowledgeState += x \n\n=== function learnt(x) ===\n    // have you learnt this fact, or indeed a stronger one\n    ~ return highest_state_for_set_of_state(x) >= x\n\n=== function between(x, y) ===\n    // are you between two ideas? Not necessarily in the same knowledge tree.\n    ~ return learnt(x) && not learnt(y)\n\n=== function think(x) ===\n    // is this your current \"strongest\" idea in this knowledge set?\n    ~ return highest_state_for_set_of_state(x) == x\n\n=== function highest_state_for_set_of_state(x) ===\n    ~ return LIST_MAX(knowledgeState ^ LIST_ALL(x))\n\n=== function did_learn(x) ===\n    //  did you learn this particular fact?\n    ~ return knowledgeState ? x\n\n//\n// Set up the scene \n//\n\nVAR bedroomLightState = (off, on_desk)\nVAR knifeState = (under_bed)\n\n//\n// Content\n//\n\n=== murder_scene ===\n    The bedroom. This is where it happened. Now to look for clues.\n- (top) \n    { bedroomLightState ? seen:     <- seen_light  }\n    <- compare_prints(-> top)\n    \n    *   (dobed) [The bed...]\n        The bed was low to the ground, but not so low something might not roll underneath. It was still neatly made. \n        ~ learn(neatly_made)\n        - - (bedhub)\n        * *     [Lift the bedcover]\n                I lifted back the bedcover. The duvet underneath was crumpled. \n                ~ learn(crumpled_duvet)\n                ~ BedState = covers_shifted\n        * *     (uncover) {learnt(crumpled_duvet)} \n                [Remove the cover] \n                Careful not to disturb anything beneath, I removed the cover entirely. The duvet below was rumpled. \n                Not the work of the maid, who was conscientious to a point. Clearly this had been thrown on in a hurry. \n                ~ learn(hastily_remade)\n                ~ BedState = covers_off\n        * *     (duvet) {BedState == covers_off} [ Pull back the duvet ] \n                I pulled back the duvet. Beneath it was a sheet, sticky with blood. \n                ~ BedState = stain_visible\n                ~ learn(body_on_bed) \n                Either the body had been moved here before being dragged to the floor - or this is was where the murder had taken place. \n        * *     {!(BedState ? made_up)} [ Remake the bed ]\n                Carefully, I pulled the bedsheets back into place, trying to make it seem undisturbed. \n                ~ BedState = made_up\n        * *     [Test the bed] \n                I pushed the bed with spread fingers. It creaked a little, but not so much as to be obnoxious.\n        * *     (darkunder) [Look under the bed] \n                Lying down, I peered under the bed, but could make nothing out. \n         \n        * *     {TURNS_SINCE(-> dobed) > 1} [Something else?] \n                I took a step back from the bed and looked around.\n                -> top \n        - -     -> bedhub\n    \n    *   {darkunder && bedroomLightState ? on_floor && bedroomLightState ? on} \n        [ Look under the bed ] \n        I peered under the bed. Something glinted back at me. \n        - - (reaching)\n        * *     [ Reach for it ] \n                I fished with one arm under the bed, but whatever it was, it had been kicked far enough back that I couldn't get my fingers on it. \n                -> reaching\n        * *     {Inventory ? cane} [Knock it with the cane] \n                -> knock_with_cane\n                \n        * *     {reaching > 1 } [ Stand up ] \n                I stood up once more, and brushed my coat down. \n                -> top \n                \n    *   (knock_with_cane) {reaching && TURNS_SINCE(-> reaching) >= 4 &&  Inventory ? cane } [Use the cane to reach under the bed ]\n        Positioning the cane above the carpet, I gave the glinting thing a sharp tap. It slid out from the under the foot of the bed. \n        ~ move_to_supporter( knifeState, on_floor ) \n        * *     (standup) [Stand up] \n                Satisfied, I stood up, and saw I had knocked free a bloodied knife. \n                -> top \n        * *     [Look under the bed once more] \n                Moving the cane aside, I looked under the bed once more, but there was nothing more there. \n                -> standup        \n                \n    *   {knifeState ? on_floor} [Pick up the knife]\n        Careful not to touch the handle, I lifted the blade from the carpet. \n        ~ get(knife)\n        \n    *   {Inventory ? knife} [Look at the knife]\n        The blood was dry enough. Dry enough to show up partial prints on the hilt!\n        ~ learn(prints_on_knife)\n        \n    *   [   The desk... ] \n        I turned my attention to the desk. A lamp sat in one corner, a neat, empty in-tray in the other. There was nothing else out.\n        Leaning against the desk was a wooden cane.\n        ~ bedroomLightState += seen \n        - - (deskstate) \n        * *     (pickup_cane) {Inventory !? cane}    [Pick up the cane ]\n                ~ get(cane) \n                I picked up the wooden cane. It was heavy, and unmarked. \n        \n        * *    { bedroomLightState !? on } [Turn on the lamp] \n                -> operate_lamp -> \n        * *     [Look at the in-tray ] \n                I regarded the in-tray, but there was nothing to be seen. Either the victim's papers were taken, or his line of work had seriously dried up. Or the in-tray was all for show. \n        + +     (open)  {open < 3} [Open a drawer] \n                I tried {a drawer at random|another drawer|a third drawer}. {Locked|Also locked|Unsurprisingly, locked as well}. \n        \n        * *     {deskstate >= 2} [Something else?] \n                I took a step away from the desk once more. \n                -> top \n        - -     -> deskstate\n   \n    *     {(Inventory ? cane) && TURNS_SINCE(-> deskstate) <= 2} [Swoosh the cane]    \n        I was still holding the cane: I gave it an experimental swoosh. It was heavy indeed, though not heavy enough to be used as a bludgeon. \n        But it might have been useful in self-defence. Why hadn't the victim reached for it? Knocked it over?\n       \n    *   [The window...] \n        I went over to the window and peered out. A dismal view of the little brook that ran down beside the house. \n        - - (window_opts)\n        <- compare_prints(-> window_opts)\n        * *     (downy) [Look down at the brook] \n                { GlassState ? steamed:\n                    Through the steamed glass I couldn't see the brook. -> see_prints_on_glass -> window_opts \n                }\n                I watched the little stream rush past for a while. The house probably had damp but otherwise, it told me nothing.\n        * *     (greasy) [Look at the glass] \n                { GlassState ? steamed: -> downy }\n                The glass in the window was greasy. No one had cleaned it in a while, inside or out. \n        * *     { GlassState ? steamed && not see_prints_on_glass && downy && greasy } \n                [ Look at the steam ] \n                A cold day outside. Natural my breath should steam. -> see_prints_on_glass -> \n        + +     {GlassState ? steam_gone} [ Breathe on the glass ]\n                I breathed gently on the glass once more. {learnt(fingerprints_on_glass): The fingerprints reappeared. }\n                ~ GlassState = steamed\n       \n        + +     [Something else?] \n                { window_opts < 2 || learnt(fingerprints_on_glass) || GlassState ? steamed:\n                    I looked away from the dreary glass. \n                    {GlassState ? steamed: \n                        ~ GlassState = steam_gone\n                        <> The steam from my breath faded.\n                    }\n                    -> top \n                }\n                I leant back from the glass. My breath had steamed up the pane a little. \n               ~ GlassState = steamed\n        - -     -> window_opts\n    \n    \n        \n    *   {top >= 5} [Leave the room] \n        I'd seen enough. I {bedroomLightState ? on:switched off the lamp, then} turned and left the room.\n        -> joe_in_hall\n    -   -> top \n    \n= see_prints_on_glass\n    ~ learn(fingerprints_on_glass)\n    {But I could see a few fingerprints, as though someone had leant their palm against it.|The fingerprints were quite clear and well-formed.} They faded as I watched.   \n    ~ GlassState = steam_gone \n    ->-> \n    \n= compare_prints (-> backto)\n    *   {learnt(fingerprints_on_glass) && learnt(prints_on_knife) && !learnt(fingerprints_on_glass_match_knife)} [Compare the prints on the knife and the window ]    \n        Holding the bloodied knife near the window, I breathed to bring out the prints once more, and compared them as best I could. \n        Hardly scientific, but they seemed very similar - very similiar indeed. \n        ~ learn(fingerprints_on_glass_match_knife)\n        -> backto\n        \n= operate_lamp \n    I flicked the light switch. \n    { bedroomLightState ? on:\n        <> The bulb fell dark. \n        ~ bedroomLightState += off\n        ~ bedroomLightState -= on \n    - else:\n        { bedroomLightState ? on_floor: <> A little light spilled under the bed.} { bedroomLightState ? on_desk : <> The light gleamed on the polished tabletop. } \n        ~ bedroomLightState -= off\n        ~ bedroomLightState += on \n    }\n    ->->\n                    \n= seen_light  \n    *   {!(bedroomLightState ? on)} [ Turn on lamp ]\n        -> operate_lamp -> \n    \n    *   { !(bedroomLightState ? on_bed)  && BedState ? stain_visible }\n        [ Move the light to the bed ] \n        ~ move_to_supporter(bedroomLightState, on_bed)\n        I moved the light over to the bloodstain and peered closely at it. It had soaked deeply into the fibres of the cotton sheet. \n        There was no doubt about it. This was where the blow had been struck. \n        ~ learn(murdered_in_bed) \n        \n    *   { !(bedroomLightState ? on_desk) } {TURNS_SINCE(-> floorit) >= 2 }\n        [ Move the light back to the desk ] \n        ~ move_to_supporter(bedroomLightState, on_desk)\n        I moved the light back to the desk, setting it down where it had originally been. \n    *   (floorit) { !(bedroomLightState ? on_floor) && darkunder } \n        [Move the light to the floor ] \n        ~ move_to_supporter(bedroomLightState, on_floor)\n        I picked the light up and set it down on the floor. \n    -   -> top \n    \n=== joe_in_hall\n    My police contact, Joe, was waiting in the hall. 'So?' he demanded. 'Did you find anything interesting?' \n- (found)\n    *   {found == 1} 'Nothing.' \n        He shrugged. 'Shame.' \n        -> done\n    *   { Inventory ? knife } 'I found the murder weapon.' \n        'Good going!' Joe replied with a grin. 'We thought the murderer had gotten rid of it. I'll bag that for you now.'\n        ~ move_to_supporter(knifeState, with_joe)\n    *   {learnt(prints_on_knife)} { knifeState ? with_joe }\n        'There are prints on the blade[.'],' I told him. \n        He regarded them carefully. \n        'Hrm. Not very complete. It'll be hard to get a match from these.'\n        ~ learn(joe_seen_prints_on_knife)\n    *   { learnt(fingerprints_on_glass_match_knife) && learnt(joe_seen_prints_on_knife) } \n        'They match a set of prints on the window, too.'\n        'Anyone could have touched the window,' Joe replied thoughtfully. 'But if they're more complete, they should help us get a decent match!' \n        ~ learn(joe_wants_better_prints)\n    *   { between(body_on_bed, murdered_in_bed)} \n        'The body was moved to the bed at some point[.'],' I told him. 'And then moved back to the floor.' \n        'Why?' \n        * *     'I don't know.' \n                Joe nods. 'All right.'\n        * *     'Perhaps to get something from the floor?' \n                'You wouldn't move a whole body for that.' \n        * *     'Perhaps he was killed in bed.' \n                'It's just speculation at this point,' Joe remarks.\n    *   { learnt(murdered_in_bed) } \n        'The victim was murdered in bed, and then the body was moved to the floor.' \n        'Why?'\n        * *     'I don't know.' \n                Joe nods. 'All right, then.'\n        * *     'Perhaps the murderer wanted to mislead us.' \n                'How so?' \n            * * *   'They wanted us to think the victim was awake[.'], I replied thoughtfully. 'That they were meeting their attacker, rather than being stabbed in their sleep.'\n            * * *   'They wanted us to think there was some kind of struggle[.'],' I replied. 'That the victim wasn't simply stabbed in their sleep.' \n            - - -   'But if they were killed in bed, that's most likely what happened. Stabbed, while sleeping.' \n                    ~ learn(murdered_while_asleep) \n        * *     'Perhaps the murderer hoped to clean up the scene.' \n                'But they were disturbed? It's possible.'\n                \n                \n    *   { found > 1} 'That's it.' \n        'All right. It's a start,' Joe replied.\n        -> done\n    -   -> found\n-   (done)\n    {\n    - between(joe_wants_better_prints, joe_got_better_prints):\n        ~ learn(joe_got_better_prints)\n        <>  He moved for the door.  'I'll get those prints from the window now.'\n    - learnt(joe_seen_prints_on_knife):\n        <> 'I'll run those prints as best I can.'\n    - else:\n        <> 'Not much to go on.'\n    }\n    -> END\n    \n`}</code></pre>\n    <h2>{`8) Summary`}</h2>\n    <p>{`To summarise a difficult section, `}<strong parentName=\"p\">{`ink`}</strong>{`'s list construction provides:`}</p>\n    <h3>{`Flags`}</h3>\n    <ul>\n      <li parentName=\"ul\"><pre parentName=\"li\"><code parentName=\"pre\" {...{}}>{`Each list entry is an event\n`}</code></pre></li>\n      <li parentName=\"ul\"><pre parentName=\"li\"><code parentName=\"pre\" {...{}}>{`Use \\`+=\\` to mark an event as having occurred \n`}</code></pre></li>\n      <li parentName=\"ul\"><pre parentName=\"li\"><code parentName=\"pre\" {...{}}>{`Test using \\`?\\` and \\`!?\\` \n`}</code></pre></li>\n    </ul>\n    <p>{`Example:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`LIST GameEvents = foundSword, openedCasket, metGorgon \n{ GameEvents ? openedCasket }\n{ GameEvents ? (foundSword, metGorgon) }\n~ GameEvents += metGorgon\n`}</code></pre>\n    <h3>{`State machines`}</h3>\n    <ul>\n      <li parentName=\"ul\"><pre parentName=\"li\"><code parentName=\"pre\" {...{}}>{`Each list entry is a state\n`}</code></pre></li>\n      <li parentName=\"ul\">{`Use `}<inlineCode parentName=\"li\">{`=`}</inlineCode>{` to set the state; `}<inlineCode parentName=\"li\">{`++`}</inlineCode>{` and `}<inlineCode parentName=\"li\">{`--`}</inlineCode>{` to step forward or backward`}</li>\n      <li parentName=\"ul\">{`Test using `}<inlineCode parentName=\"li\">{`==`}</inlineCode>{`, `}<inlineCode parentName=\"li\">{`>`}</inlineCode>{` etc`}</li>\n    </ul>\n    <p>{`Example:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`LIST PancakeState = ingredients_gathered, batter_mix, pan_hot, pancakes_tossed, ready_to_eat \n{ PancakeState == batter_mix }\n{ PancakeState < ready_to_eat }\n~ PancakeState++\n`}</code></pre>\n    <h3>{`Properties`}</h3>\n    <ul>\n      <li parentName=\"ul\">{`Each list is a different property, with values for the states that property can take (on or off, lit or unlit, etc) `}</li>\n      <li parentName=\"ul\"><pre parentName=\"li\"><code parentName=\"pre\" {...{}}>{`Change state by removing the old state, then adding in the new\n`}</code></pre></li>\n      <li parentName=\"ul\">{`Test using `}<inlineCode parentName=\"li\">{`?`}</inlineCode>{` and `}<inlineCode parentName=\"li\">{`!?`}</inlineCode></li>\n    </ul>\n    <p>{`Example: `}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`LIST OnOffState = on, off \nLIST ChargeState = uncharged, charging, charged\n\nVAR PhoneState = (off, uncharged)\n\n*   {PhoneState !? uncharged } [Plug in phone]\n    ~ PhoneState -= LIST_ALL(ChargeState)\n    ~ PhoneState += charging\n    You plug the phone into charge.\n*   { PhoneState ? (on, charged) } [ Call my mother ]\n`}</code></pre>\n    </MDXLayout>;\n}\n\nMDXContent.isMDXComponent = true;\n  ","/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\n\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1>{`Part Six: International character support in identifiers`}</h1>\n    <p>{`By default, ink has no limitations on the use of non-ASCII characters inside the story content. However, a limitation currently exsits\non the characters that can be used for names of constants, variables, stictches, diverts and other named flow elements (a.k.a. `}<em parentName=\"p\">{`identifiers`}</em>{`).`}</p>\n    <p>{`Sometimes it is inconvenient for a writer using a non-ASCII language to write a story because they have to constantly switch to naming identifiers in ASCII and then switching back to whatever language they are using for the story. In addition, naming identifiers in the author's own language could improve the overal readibility of the raw story format.`}</p>\n    <p>{`In an effort to assist in the above scenario, ink `}<em parentName=\"p\">{`automatically`}</em>{` supports a list of pre-defined non-ASCII character ranges that can be used as identifiers. In general, those ranges have been selected to include the alpha-numeric subset of the official unicode character range, which would suffice for naming identifiers. The below section gives more detailed information on the non-ASCII characters that ink automatically supports.`}</p>\n    <h3>{`Supported Identifier Characters`}</h3>\n    <p>{`The support for the additional character ranges in ink is currently limited to a predefined set of character ranges.`}</p>\n    <p>{`Below is a listing of the currently supported identifier ranges.`}</p>\n    <ul>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><strong parentName=\"p\">{`Arabic`}</strong></p>\n        <p parentName=\"li\">{`Enables characters for languages of the Arabic family and is a subset of the official `}<em parentName=\"p\">{`Arabic`}</em>{` unicode range `}<inlineCode parentName=\"p\">{`\\\\u0600`}</inlineCode>{`-`}<inlineCode parentName=\"p\">{`\\\\u06FF`}</inlineCode>{`.`}</p>\n      </li>\n    </ul>\n    <ul>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><strong parentName=\"p\">{`Armenian`}</strong></p>\n        <p parentName=\"li\">{`Enables characters for the Armenian language and is a subset of the official `}<em parentName=\"p\">{`Armenian`}</em>{` unicode range `}<inlineCode parentName=\"p\">{`\\\\u0530`}</inlineCode>{`-`}<inlineCode parentName=\"p\">{`\\\\u058F`}</inlineCode>{`.`}</p>\n      </li>\n    </ul>\n    <ul>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><strong parentName=\"p\">{`Cyrillic`}</strong></p>\n        <p parentName=\"li\">{`Enables characters for languages using the Cyrillic alphabet and is a subset of the official `}<em parentName=\"p\">{`Cyrillic`}</em>{` unicode range `}<inlineCode parentName=\"p\">{`\\\\u0400`}</inlineCode>{`-`}<inlineCode parentName=\"p\">{`\\\\u04FF`}</inlineCode>{`.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><strong parentName=\"p\">{`Greek`}</strong></p>\n        <p parentName=\"li\">{`Enables characters for languages using the Greek alphabet and is a subset of the official `}<em parentName=\"p\">{`Greek and Coptic`}</em>{` unicode range `}<inlineCode parentName=\"p\">{`\\\\u0370`}</inlineCode>{`-`}<inlineCode parentName=\"p\">{`\\\\u03FF`}</inlineCode>{`.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><strong parentName=\"p\">{`Hebrew`}</strong></p>\n        <p parentName=\"li\">{`Enables characters in Hebrew using the Hebrew alphabet and is a subset of the official `}<em parentName=\"p\">{`Hebrew`}</em>{` unicode range `}<inlineCode parentName=\"p\">{`\\\\u0590`}</inlineCode>{`-`}<inlineCode parentName=\"p\">{`\\\\u05FF`}</inlineCode>{`.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><strong parentName=\"p\">{`Latin Extended A`}</strong>{`  `}</p>\n        <p parentName=\"li\">{`Enables an extended character range subset of the Latin alphabet - completely represented by the official `}<em parentName=\"p\">{`Latin Extended-A`}</em>{` unicode range `}<inlineCode parentName=\"p\">{`\\\\u0100`}</inlineCode>{`-`}<inlineCode parentName=\"p\">{`\\\\u017F`}</inlineCode>{`.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><strong parentName=\"p\">{`Latin Extended B`}</strong></p>\n        <p parentName=\"li\">{`Enables an extended character range subset of the Latin alphabet - completely represented by the official `}<em parentName=\"p\">{`Latin Extended-B`}</em>{` unicode range `}<inlineCode parentName=\"p\">{`\\\\u0180`}</inlineCode>{`-`}<inlineCode parentName=\"p\">{`\\\\u024F`}</inlineCode>{`.  `}</p>\n      </li>\n    </ul>\n    <p><strong parentName=\"p\">{`NOTE!`}</strong>{` ink files should be saved in UTF-8 format, which ensures that the above character ranges are supported.`}</p>\n    <p>{`If a particular character range that you would like to use within identifiers isn't supported, feel free to open an `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/inkle/ink/issues/new\"\n      }}>{`issue`}</a>{` or `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/inkle/ink/pulls\"\n      }}>{`pull request`}</a>{` on the main ink repo.`}</p>\n    </MDXLayout>;\n}\n\nMDXContent.isMDXComponent = true;\n  ","/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\nimport {\n  default as Introduction,\n} from './chapters/introduction.mdx';\nimport {\n  default as Chapter01,\n} from './chapters/chapter01.mdx';\nimport {\n  default as Chapter02,\n} from './chapters/chapter02.mdx';\nimport {\n  default as Chapter03,\n} from './chapters/chapter03.mdx';\nimport {\n  default as Chapter04,\n} from './chapters/chapter04.mdx';\nimport {\n  default as Chapter05,\n} from './chapters/chapter05.mdx';\nimport {\n  default as Chapter06,\n} from './chapters/chapter06.mdx';\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h1>{`Writing with ink`}</h1>\n    <Introduction mdxType=\"Introduction\" />\n    <Chapter01 mdxType=\"Chapter01\" />\n    <Chapter02 mdxType=\"Chapter02\" />\n    <Chapter03 mdxType=\"Chapter03\" />\n    <Chapter04 mdxType=\"Chapter04\" />\n    <Chapter05 mdxType=\"Chapter05\" />\n    <Chapter06 mdxType=\"Chapter06\" />\n    </MDXLayout>;\n}\n\nMDXContent.isMDXComponent = true;\n  ","import {\r\n  getMdxComponents,\r\n} from '../../functions/getMdxComponents';\r\nimport {\r\n  MDXProvider,\r\n} from '@mdx-js/tag';\r\nimport {\r\n  default as React,\r\n} from 'react';\r\n\r\nimport MdDoc from '../../markdown/document.mdx';\r\n\r\nconst mdxComponents = getMdxComponents();\r\n\r\nconst Document = () => (\r\n  <MDXProvider components={mdxComponents}>\r\n    <MdDoc components={mdxComponents} />\r\n  </MDXProvider>\r\n);\r\n\r\nexport default Document;\r\n","import {\r\n  Code as code,\r\n} from '../components/Code';\r\n\r\nexport const getMdxComponents = () => ({\r\n  code,\r\n  pre: code,\r\n});\r\n"],"sourceRoot":""}